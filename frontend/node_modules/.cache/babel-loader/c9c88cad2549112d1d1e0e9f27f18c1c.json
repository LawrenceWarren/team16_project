{"ast":null,"code":"'use strict';\n\nvar packageInfo = require('../package.json');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar os = require('os');\n\nvar crypto = require('crypto');\n\nvar DataStream = require('./data-stream');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar shared = require('nodemailer-shared');\n\nvar ntlm = require('httpntlm/ntlm'); // default timeout values in ms\n\n\nvar CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\n\nvar SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\n\nvar GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\n\nmodule.exports = SMTPConnection;\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 25 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\n\nfunction SMTPConnection(options) {\n  EventEmitter.call(this);\n  this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n  this.stage = 'init';\n  this.options = options || {};\n  this.secureConnection = !!this.options.secure;\n  this.alreadySecured = !!this.options.secured;\n  this.port = this.options.port || (this.secureConnection ? 465 : 25);\n  this.host = this.options.host || 'localhost';\n\n  if (typeof this.options.secure === 'undefined' && this.port === 465) {\n    // if secure option is not set but port is 465, then default to secure\n    this.secureConnection = true;\n  }\n\n  this.name = this.options.name || this._getHostname();\n  this.logger = shared.getLogger(this.options);\n  /**\n   * Expose version nr, just for the reference\n   * @type {String}\n   */\n\n  this.version = packageInfo.version;\n  /**\n   * If true, then the user is authenticated\n   * @type {Boolean}\n   */\n\n  this.authenticated = false;\n  /**\n   * If set to true, this instance is no longer active\n   * @private\n   */\n\n  this.destroyed = false;\n  /**\n   * Defines if the current connection is secure or not. If not,\n   * STARTTLS can be used if available\n   * @private\n   */\n\n  this.secure = !!this.secureConnection;\n  /**\n   * Store incomplete messages coming from the server\n   * @private\n   */\n\n  this._remainder = '';\n  /**\n   * Unprocessed responses from the server\n   * @type {Array}\n   */\n\n  this._responseQueue = [];\n  /**\n   * The socket connecting to the server\n   * @publick\n   */\n\n  this._socket = false;\n  /**\n   * Lists supported auth mechanisms\n   * @private\n   */\n\n  this._supportedAuth = [];\n  /**\n   * Includes current envelope (from, to)\n   * @private\n   */\n\n  this._envelope = false;\n  /**\n   * Lists supported extensions\n   * @private\n   */\n\n  this._supportedExtensions = [];\n  /**\n   * Defines the maximum allowed size for a single message\n   * @private\n   */\n\n  this._maxAllowedSize = 0;\n  /**\n   * Function queue to run if a data chunk comes from the server\n   * @private\n   */\n\n  this._responseActions = [];\n  this._recipientQueue = [];\n  /**\n   * Timeout variable for waiting the greeting\n   * @private\n   */\n\n  this._greetingTimeout = false;\n  /**\n   * Timeout variable for waiting the connection to start\n   * @private\n   */\n\n  this._connectionTimeout = false;\n  /**\n   * If the socket is deemed already closed\n   * @private\n   */\n\n  this._destroyed = false;\n  /**\n   * If the socket is already being closed\n   * @private\n   */\n\n  this._closing = false;\n}\n\nutil.inherits(SMTPConnection, EventEmitter);\n/**\n * Creates a connection to a SMTP server and sets up connection\n * listener\n */\n\nSMTPConnection.prototype.connect = function (connectCallback) {\n  if (typeof connectCallback === 'function') {\n    this.once('connect', function () {\n      this.logger.debug('[%s] SMTP handshake finished', this.id);\n      connectCallback();\n    }.bind(this));\n  }\n\n  var opts = {\n    port: this.port,\n    host: this.host\n  };\n\n  if (this.options.localAddress) {\n    opts.localAddress = this.options.localAddress;\n  }\n\n  if (this.options.connection) {\n    // connection is already opened\n    this._socket = this.options.connection;\n\n    if (this.secureConnection && !this.alreadySecured) {\n      setImmediate(this._upgradeConnection.bind(this, function (err) {\n        if (err) {\n          this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n\n          return;\n        }\n\n        this._onConnect();\n      }.bind(this)));\n    } else {\n      setImmediate(this._onConnect.bind(this));\n    }\n  } else if (this.options.socket) {\n    // socket object is set up but not yet connected\n    this._socket = this.options.socket;\n\n    try {\n      this._socket.connect(this.port, this.host, this._onConnect.bind(this));\n    } catch (E) {\n      return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n    }\n  } else if (this.secureConnection) {\n    // connect using tls\n    if (this.options.tls) {\n      Object.keys(this.options.tls).forEach(function (key) {\n        opts[key] = this.options.tls[key];\n      }.bind(this));\n    }\n\n    try {\n      this._socket = tls.connect(this.port, this.host, opts, this._onConnect.bind(this));\n    } catch (E) {\n      return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n    }\n  } else {\n    // connect using plaintext\n    try {\n      this._socket = net.connect(opts, this._onConnect.bind(this));\n    } catch (E) {\n      return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n    }\n  }\n\n  this._connectionTimeout = setTimeout(function () {\n    this._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n  }.bind(this), this.options.connectionTimeout || CONNECTION_TIMEOUT);\n\n  this._socket.on('error', function (err) {\n    this._onError(err, 'ECONNECTION', false, 'CONN');\n  }.bind(this));\n};\n/**\n * Sends QUIT\n */\n\n\nSMTPConnection.prototype.quit = function () {\n  this._sendCommand('QUIT');\n\n  this._responseActions.push(this.close);\n};\n/**\n * Closes the connection to the server\n */\n\n\nSMTPConnection.prototype.close = function () {\n  clearTimeout(this._connectionTimeout);\n  clearTimeout(this._greetingTimeout);\n  this._responseActions = []; // allow to run this function only once\n\n  if (this._closing) {\n    return;\n  }\n\n  this._closing = true;\n  var closeMethod = 'end';\n\n  if (this.stage === 'init') {\n    // Close the socket immediately when connection timed out\n    closeMethod = 'destroy';\n  }\n\n  this.logger.debug('[%s] Closing connection to the server using \"%s\"', this.id, closeMethod);\n  var socket = this._socket && this._socket.socket || this._socket;\n\n  if (socket && !socket.destroyed) {\n    try {\n      this._socket[closeMethod]();\n    } catch (E) {// just ignore\n    }\n  }\n\n  this._destroy();\n};\n/**\n * Authenticate user\n */\n\n\nSMTPConnection.prototype.login = function (authData, callback) {\n  this._auth = authData || {};\n  this._user = this._auth.xoauth2 && this._auth.xoauth2.options && this._auth.xoauth2.options.user || this._auth.user || '';\n  this._authMethod = false;\n\n  if (this.options.authMethod) {\n    this._authMethod = this.options.authMethod.toUpperCase().trim();\n  } else if (this._auth.xoauth2 && this._supportedAuth.indexOf('XOAUTH2') >= 0) {\n    this._authMethod = 'XOAUTH2';\n  } else if (this._auth.domain && this._supportedAuth.indexOf('NTLM') >= 0) {\n    this._authMethod = 'NTLM';\n  } else {\n    // use first supported\n    this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n  }\n\n  switch (this._authMethod) {\n    case 'XOAUTH2':\n      this._handleXOauth2Token(false, callback);\n\n      return;\n\n    case 'LOGIN':\n      this._responseActions.push(function (str) {\n        this._actionAUTH_LOGIN_USER(str, callback);\n      }.bind(this));\n\n      this._sendCommand('AUTH LOGIN');\n\n      return;\n\n    case 'PLAIN':\n      this._responseActions.push(function (str) {\n        this._actionAUTHComplete(str, callback);\n      }.bind(this));\n\n      this._sendCommand('AUTH PLAIN ' + new Buffer( //this._auth.user+'\\u0000'+\n      '\\u0000' + // skip authorization identity as it causes problems with some servers\n      this._auth.user + '\\u0000' + this._auth.pass, 'utf-8').toString('base64'));\n\n      return;\n\n    case 'CRAM-MD5':\n      this._responseActions.push(function (str) {\n        this._actionAUTH_CRAM_MD5(str, callback);\n      }.bind(this));\n\n      this._sendCommand('AUTH CRAM-MD5');\n\n      return;\n\n    case 'NTLM':\n      this._responseActions.push(function (str) {\n        this._actionAUTH_NTLM_TYPE1(str, callback);\n      }.bind(this));\n\n      this._sendCommand('AUTH ' + ntlm.createType1Message({\n        domain: this._auth.domain || '',\n        workstation: this._auth.workstation || ''\n      }));\n\n      return;\n  }\n\n  return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n};\n/**\n * Sends a message\n *\n * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n * @param {Object} message String, Buffer or a Stream\n * @param {Function} callback Callback to return once sending is completed\n */\n\n\nSMTPConnection.prototype.send = function (envelope, message, done) {\n  if (!message) {\n    return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n  } // reject larger messages than allowed\n\n\n  if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n    return setImmediate(function () {\n      done(this._formatError('Message size larger than allowed ' + this._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n    }.bind(this));\n  } // ensure that callback is only called once\n\n\n  var returned = false;\n\n  var callback = function () {\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    done.apply(null, Array.prototype.slice.call(arguments));\n  };\n\n  if (typeof message.on === 'function') {\n    message.on('error', function (err) {\n      return callback(this._formatError(err, 'ESTREAM', false, 'API'));\n    }.bind(this));\n  }\n\n  this._setEnvelope(envelope, function (err, info) {\n    if (err) {\n      return callback(err);\n    }\n\n    var stream = this._createSendStream(function (err, str) {\n      if (err) {\n        return callback(err);\n      }\n\n      info.response = str;\n      return callback(null, info);\n    });\n\n    if (typeof message.pipe === 'function') {\n      message.pipe(stream);\n    } else {\n      stream.write(message);\n      stream.end();\n    }\n  }.bind(this));\n};\n/**\n * Resets connection state\n *\n * @param {Function} callback Callback to return once connection is reset\n */\n\n\nSMTPConnection.prototype.reset = function (callback) {\n  this._sendCommand('RSET');\n\n  this._responseActions.push(function (str) {\n    if (str.charAt(0) !== '2') {\n      return callback(this._formatError('Could not reset session state:\\n' + str, 'EPROTOCOL', str, 'RSET'));\n    }\n\n    this._envelope = false;\n    return callback(null, true);\n  }.bind(this));\n};\n/**\n * Connection listener that is run when the connection to\n * the server is opened\n *\n * @event\n */\n\n\nSMTPConnection.prototype._onConnect = function () {\n  clearTimeout(this._connectionTimeout);\n  this.logger.info('[%s] %s established to %s:%s', this.id, this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);\n\n  if (this._destroyed) {\n    // Connection was established after we already had canceled it\n    this.close();\n    return;\n  }\n\n  this.stage = 'connected'; // clear existing listeners for the socket\n\n  this._socket.removeAllListeners('data');\n\n  this._socket.removeAllListeners('timeout');\n\n  this._socket.removeAllListeners('close');\n\n  this._socket.removeAllListeners('end');\n\n  this._socket.on('data', this._onData.bind(this));\n\n  this._socket.once('close', this._onClose.bind(this));\n\n  this._socket.once('end', this._onEnd.bind(this));\n\n  this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n\n  this._socket.on('timeout', this._onTimeout.bind(this));\n\n  this._greetingTimeout = setTimeout(function () {\n    // if still waiting for greeting, give up\n    if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n      this._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n    }\n  }.bind(this), this.options.greetingTimeout || GREETING_TIMEOUT);\n\n  this._responseActions.push(this._actionGreeting); // we have a 'data' listener set up so resume socket if it was paused\n\n\n  this._socket.resume();\n};\n/**\n * 'data' listener for data coming from the server\n *\n * @event\n * @param {Buffer} chunk Data chunk coming from the server\n */\n\n\nSMTPConnection.prototype._onData = function (chunk) {\n  if (this._destroyed || !chunk || !chunk.length) {\n    return;\n  }\n\n  var data = (chunk || '').toString('binary');\n  var lines = (this._remainder + data).split(/\\r?\\n/);\n  var lastline;\n  this._remainder = lines.pop();\n\n  for (var i = 0, len = lines.length; i < len; i++) {\n    if (this._responseQueue.length) {\n      lastline = this._responseQueue[this._responseQueue.length - 1];\n\n      if (/^\\d+\\-/.test(lastline.split('\\n').pop())) {\n        this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n        continue;\n      }\n    }\n\n    this._responseQueue.push(lines[i]);\n  }\n\n  this._processResponse();\n};\n/**\n * 'error' listener for the socket\n *\n * @event\n * @param {Error} err Error object\n * @param {String} type Error name\n */\n\n\nSMTPConnection.prototype._onError = function (err, type, data, command) {\n  clearTimeout(this._connectionTimeout);\n  clearTimeout(this._greetingTimeout);\n\n  if (this._destroyed) {\n    // just ignore, already closed\n    // this might happen when a socket is canceled because of reached timeout\n    // but the socket timeout error itself receives only after\n    return;\n  }\n\n  err = this._formatError(err, type, data, command);\n  this.logger.error('[%s] %s', this.id, err.message);\n  this.emit('error', err);\n  this.close();\n};\n\nSMTPConnection.prototype._formatError = function (message, type, response, command) {\n  var err;\n\n  if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n    err = message;\n  } else {\n    err = new Error(message);\n  }\n\n  if (type && type !== 'Error') {\n    err.code = type;\n  }\n\n  if (response) {\n    err.response = response;\n    err.message += ': ' + response;\n  }\n\n  var responseCode = typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0]) || false;\n\n  if (responseCode) {\n    err.responseCode = responseCode;\n  }\n\n  if (command) {\n    err.command = command;\n  }\n\n  return err;\n};\n/**\n * 'close' listener for the socket\n *\n * @event\n */\n\n\nSMTPConnection.prototype._onClose = function () {\n  this.logger.info('[%s] Connection closed', this.id);\n\n  if ([this._actionGreeting, this.close].indexOf(this._responseActions[0]) < 0 && !this._destroyed) {\n    return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');\n  }\n\n  this._destroy();\n};\n/**\n * 'end' listener for the socket\n *\n * @event\n */\n\n\nSMTPConnection.prototype._onEnd = function () {\n  this._destroy();\n};\n/**\n * 'timeout' listener for the socket\n *\n * @event\n */\n\n\nSMTPConnection.prototype._onTimeout = function () {\n  return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n};\n/**\n * Destroys the client, emits 'end'\n */\n\n\nSMTPConnection.prototype._destroy = function () {\n  if (this._destroyed) {\n    return;\n  }\n\n  this._destroyed = true;\n  this.emit('end');\n};\n/**\n * Upgrades the connection to TLS\n *\n * @param {Function} callback Callback function to run when the connection\n *        has been secured\n */\n\n\nSMTPConnection.prototype._upgradeConnection = function (callback) {\n  // do not remove all listeners or it breaks node v0.10 as there's\n  // apparently a 'finish' event set that would be cleared as well\n  // we can safely keep 'error', 'end', 'close' etc. events\n  this._socket.removeAllListeners('data'); // incoming data is going to be gibberish from this point onwards\n\n\n  this._socket.removeAllListeners('timeout'); // timeout will be re-set for the new socket object\n\n\n  var socketPlain = this._socket;\n  var opts = {\n    socket: this._socket,\n    host: this.host\n  };\n  Object.keys(this.options.tls || {}).forEach(function (key) {\n    opts[key] = this.options.tls[key];\n  }.bind(this));\n  this._socket = tls.connect(opts, function () {\n    this.secure = true;\n\n    this._socket.on('data', this._onData.bind(this));\n\n    socketPlain.removeAllListeners('close');\n    socketPlain.removeAllListeners('end');\n    return callback(null, true);\n  }.bind(this));\n\n  this._socket.on('error', this._onError.bind(this));\n\n  this._socket.once('close', this._onClose.bind(this));\n\n  this._socket.once('end', this._onEnd.bind(this));\n\n  this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n\n\n  this._socket.on('timeout', this._onTimeout.bind(this)); // resume in case the socket was paused\n\n\n  socketPlain.resume();\n};\n/**\n * Processes queued responses from the server\n *\n * @param {Boolean} force If true, ignores _processing flag\n */\n\n\nSMTPConnection.prototype._processResponse = function () {\n  if (!this._responseQueue.length) {\n    return false;\n  }\n\n  var str = (this._responseQueue.shift() || '').toString();\n\n  if (/^\\d+\\-/.test(str.split('\\n').pop())) {\n    // keep waiting for the final part of multiline response\n    return;\n  }\n\n  if (this.options.debug) {\n    this.logger.debug('[%s] S: %s', this.id, str.replace(/\\r?\\n$/, ''));\n  }\n\n  if (!str.trim()) {\n    // skip unexpected empty lines\n    setImmediate(this._processResponse.bind(this, true));\n  }\n\n  var action = this._responseActions.shift();\n\n  if (typeof action === 'function') {\n    action.call(this, str);\n    setImmediate(this._processResponse.bind(this, true));\n  } else {\n    return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n  }\n};\n/**\n * Send a command to the server, append \\r\\n\n *\n * @param {String} str String to be sent to the server\n */\n\n\nSMTPConnection.prototype._sendCommand = function (str) {\n  if (this._destroyed) {\n    // Connection already closed, can't send any more data\n    return;\n  }\n\n  if (this._socket.destroyed) {\n    return this.close();\n  }\n\n  if (this.options.debug) {\n    this.logger.debug('[%s] C: %s', this.id, (str || '').toString().replace(/\\r?\\n$/, ''));\n  }\n\n  this._socket.write(new Buffer(str + '\\r\\n', 'utf-8'));\n};\n/**\n * Initiates a new message by submitting envelope data, starting with\n * MAIL FROM: command\n *\n * @param {Object} envelope Envelope object in the form of\n *        {from:'...', to:['...']}\n *        or\n *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n */\n\n\nSMTPConnection.prototype._setEnvelope = function (envelope, callback) {\n  var args = [];\n  var useSmtpUtf8 = false;\n  this._envelope = envelope || {};\n  this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();\n  this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n    return (to && to.address || to || '').toString().trim();\n  });\n\n  if (!this._envelope.to.length) {\n    return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n  }\n\n  if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n    return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n  } // check if the sender address uses only ASCII characters,\n  // otherwise require usage of SMTPUTF8 extension\n\n\n  if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n    useSmtpUtf8 = true;\n  }\n\n  for (var i = 0, len = this._envelope.to.length; i < len; i++) {\n    if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n      return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n    } // check if the recipients addresses use only ASCII characters,\n    // otherwise require usage of SMTPUTF8 extension\n\n\n    if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n      useSmtpUtf8 = true;\n    }\n  } // clone the recipients array for latter manipulation\n\n\n  this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n  this._envelope.rejected = [];\n  this._envelope.rejectedErrors = [];\n  this._envelope.accepted = [];\n\n  if (this._envelope.dsn) {\n    try {\n      this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n    } catch (err) {\n      return callback(this._formatError('Invalid dsn ' + err.message, 'EENVELOPE', false, 'API'));\n    }\n  }\n\n  this._responseActions.push(function (str) {\n    this._actionMAIL(str, callback);\n  }.bind(this)); // If the server supports SMTPUTF8 and the envelope includes an internationalized\n  // email address then append SMTPUTF8 keyword to the MAIL FROM command\n\n\n  if (useSmtpUtf8 && this._supportedExtensions.indexOf('SMTPUTF8') >= 0) {\n    args.push('SMTPUTF8');\n    this._usingSmtpUtf8 = true;\n  } // If the server supports 8BITMIME and the message might contain non-ascii bytes\n  // then append the 8BITMIME keyword to the MAIL FROM command\n\n\n  if (this._envelope.use8BitMime && this._supportedExtensions.indexOf('8BITMIME') >= 0) {\n    args.push('BODY=8BITMIME');\n    this._using8BitMime = true;\n  }\n\n  if (this._envelope.size && this._supportedExtensions.indexOf('SIZE') >= 0) {\n    args.push('SIZE=' + this._envelope.size);\n  } // If the server supports DSN and the envelope includes an DSN prop\n  // then append DSN params to the MAIL FROM command\n\n\n  if (this._envelope.dsn && this._supportedExtensions.indexOf('DSN') >= 0) {\n    if (this._envelope.dsn.ret) {\n      args.push('RET=' + this._envelope.dsn.ret);\n    }\n\n    if (this._envelope.dsn.envid) {\n      args.push('ENVID=' + this._envelope.dsn.envid);\n    }\n  }\n\n  this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));\n};\n\nSMTPConnection.prototype._setDsnEnvelope = function (params) {\n  var ret = params.ret ? params.ret.toString().toUpperCase() : null;\n\n  if (ret && ['FULL', 'HDRS'].indexOf(ret) < 0) {\n    throw new Error('ret: ' + JSON.stringify(ret));\n  }\n\n  var envid = params.envid ? params.envid.toString() : null;\n  var notify = params.notify ? params.notify : null;\n\n  if (notify) {\n    if (typeof notify === 'string') {\n      notify = notify.split(',');\n    }\n\n    notify = notify.map(function (n) {\n      return n.trim().toUpperCase();\n    });\n    var validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n    var invaliNotify = notify.filter(function (n) {\n      return validNotify.indexOf(n) === -1;\n    });\n\n    if (invaliNotify.length || notify.length > 1 && notify.indexOf('NEVER') >= 0) {\n      throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n    }\n\n    notify = notify.join(',');\n  }\n\n  var orcpt = params.orcpt ? params.orcpt.toString() : null;\n  return {\n    ret: ret,\n    envid: envid,\n    notify: notify,\n    orcpt: orcpt\n  };\n};\n\nSMTPConnection.prototype._getDsnRcptToArgs = function () {\n  var args = []; // If the server supports DSN and the envelope includes an DSN prop\n  // then append DSN params to the RCPT TO command\n\n  if (this._envelope.dsn && this._supportedExtensions.indexOf('DSN') >= 0) {\n    if (this._envelope.dsn.notify) {\n      args.push('NOTIFY=' + this._envelope.dsn.notify);\n    }\n\n    if (this._envelope.dsn.orcpt) {\n      args.push('ORCPT=' + this._envelope.dsn.orcpt);\n    }\n  }\n\n  return args.length ? ' ' + args.join(' ') : '';\n};\n\nSMTPConnection.prototype._createSendStream = function (callback) {\n  var dataStream = new DataStream();\n  var logStream;\n\n  if (this.options.lmtp) {\n    this._envelope.accepted.forEach(function (recipient, i) {\n      var final = i === this._envelope.accepted.length - 1;\n\n      this._responseActions.push(function (str) {\n        this._actionLMTPStream(recipient, final, str, callback);\n      }.bind(this));\n    }.bind(this));\n  } else {\n    this._responseActions.push(function (str) {\n      this._actionSMTPStream(str, callback);\n    }.bind(this));\n  }\n\n  dataStream.pipe(this._socket, {\n    end: false\n  });\n\n  if (this.options.debug) {\n    logStream = new PassThrough();\n    logStream.on('readable', function () {\n      var chunk;\n\n      while (chunk = logStream.read()) {\n        this.logger.debug('[%s] C: %s', this.id, chunk.toString('binary').replace(/\\r?\\n$/, ''));\n      }\n    }.bind(this));\n    dataStream.pipe(logStream);\n  }\n\n  dataStream.once('end', function () {\n    this.logger.info('[%s] C: <%s bytes encoded mime message (source size %s bytes)>', this.id, dataStream.outByteCount, dataStream.inByteCount);\n  }.bind(this));\n  return dataStream;\n};\n/** ACTIONS **/\n\n/**\n * Will be run after the connection is created and the server sends\n * a greeting. If the incoming message starts with 220 initiate\n * SMTP session by sending EHLO command\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionGreeting = function (str) {\n  clearTimeout(this._greetingTimeout);\n\n  if (str.substr(0, 3) !== '220') {\n    this._onError(new Error('Invalid greeting from server:\\n' + str), 'EPROTOCOL', str, 'CONN');\n\n    return;\n  }\n\n  if (this.options.lmtp) {\n    this._responseActions.push(this._actionLHLO);\n\n    this._sendCommand('LHLO ' + this.name);\n  } else {\n    this._responseActions.push(this._actionEHLO);\n\n    this._sendCommand('EHLO ' + this.name);\n  }\n};\n/**\n * Handles server response for LHLO command. If it yielded in\n * error, emit 'error', otherwise treat this as an EHLO response\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionLHLO = function (str) {\n  if (str.charAt(0) !== '2') {\n    this._onError(new Error('Invalid response for LHLO:\\n' + str), 'EPROTOCOL', str, 'LHLO');\n\n    return;\n  }\n\n  this._actionEHLO(str);\n};\n/**\n * Handles server response for EHLO command. If it yielded in\n * error, try HELO instead, otherwise initiate TLS negotiation\n * if STARTTLS is supported by the server or move into the\n * authentication phase.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionEHLO = function (str) {\n  var match;\n\n  if (str.substr(0, 3) === '421') {\n    this._onError(new Error('Server terminates connection:\\n' + str), 'ECONNECTION', str, 'EHLO');\n\n    return;\n  }\n\n  if (str.charAt(0) !== '2') {\n    if (this.options.requireTLS) {\n      this._onError(new Error('EHLO failed but HELO does not support required STARTTLS:\\n' + str), 'ECONNECTION', str, 'EHLO');\n\n      return;\n    } // Try HELO instead\n\n\n    this._responseActions.push(this._actionHELO);\n\n    this._sendCommand('HELO ' + this.name);\n\n    return;\n  } // Detect if the server supports STARTTLS\n\n\n  if (!this.secure && !this.options.ignoreTLS && (/[ \\-]STARTTLS\\b/mi.test(str) || this.options.requireTLS)) {\n    this._sendCommand('STARTTLS');\n\n    this._responseActions.push(this._actionSTARTTLS);\n\n    return;\n  } // Detect if the server supports SMTPUTF8\n\n\n  if (/[ \\-]SMTPUTF8\\b/mi.test(str)) {\n    this._supportedExtensions.push('SMTPUTF8');\n  } // Detect if the server supports DSN\n\n\n  if (/[ \\-]DSN\\b/mi.test(str)) {\n    this._supportedExtensions.push('DSN');\n  } // Detect if the server supports 8BITMIME\n\n\n  if (/[ \\-]8BITMIME\\b/mi.test(str)) {\n    this._supportedExtensions.push('8BITMIME');\n  } // Detect if the server supports PIPELINING\n\n\n  if (/[ \\-]PIPELINING\\b/mi.test(str)) {\n    this._supportedExtensions.push('PIPELINING');\n  } // Detect if the server supports PLAIN auth\n\n\n  if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n    this._supportedAuth.push('PLAIN');\n  } // Detect if the server supports LOGIN auth\n\n\n  if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n    this._supportedAuth.push('LOGIN');\n  } // Detect if the server supports CRAM-MD5 auth\n\n\n  if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n    this._supportedAuth.push('CRAM-MD5');\n  } // Detect if the server supports XOAUTH2 auth\n\n\n  if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n    this._supportedAuth.push('XOAUTH2');\n  } // Detect if the server supports SIZE extensions (and the max allowed size)\n\n\n  if (match = str.match(/[ \\-]SIZE(?:\\s+(\\d+))?/mi)) {\n    this._supportedExtensions.push('SIZE');\n\n    this._maxAllowedSize = Number(match[1]) || 0;\n  }\n\n  this.emit('connect');\n};\n/**\n * Handles server response for HELO command. If it yielded in\n * error, emit 'error', otherwise move into the authentication phase.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionHELO = function (str) {\n  if (str.charAt(0) !== '2') {\n    this._onError(new Error('Invalid response for EHLO/HELO:\\n' + str), 'EPROTOCOL', str, 'HELO');\n\n    return;\n  }\n\n  this.emit('connect');\n};\n/**\n * Handles server response for STARTTLS command. If there's an error\n * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n * succeedes restart the EHLO\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionSTARTTLS = function (str) {\n  if (str.charAt(0) !== '2') {\n    if (this.options.opportunisticTLS) {\n      this.logger.info('[%s] Failed STARTTLS upgrade, continuing unencrypted', this.id);\n      return this.emit('connect');\n    }\n\n    this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n\n    return;\n  }\n\n  this._upgradeConnection(function (err, secured) {\n    if (err) {\n      this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n\n      return;\n    }\n\n    this.logger.info('[%s] Connection upgraded with STARTTLS', this.id);\n\n    if (secured) {\n      // restart session\n      this._responseActions.push(this._actionEHLO);\n\n      this._sendCommand('EHLO ' + this.name);\n    } else {\n      this.emit('connect');\n    }\n  }.bind(this));\n};\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n * response needs to be base64 encoded username.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_LOGIN_USER = function (str, callback) {\n  if (str !== '334 VXNlcm5hbWU6') {\n    callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n    return;\n  }\n\n  this._responseActions.push(function (str) {\n    this._actionAUTH_LOGIN_PASS(str, callback);\n  }.bind(this));\n\n  this._sendCommand(new Buffer(this._auth.user + '', 'utf-8').toString('base64'));\n};\n/**\n * Handle the response for AUTH NTLM, which should be a\n * '334 <challenge string>'. See http://davenport.sourceforge.net/ntlm.html\n * We already sent the Type1 message, the challenge is a Type2 message, we\n * need to respond with a Type3 message.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_NTLM_TYPE1 = function (str, callback) {\n  var challengeMatch = str.match(/^334\\s+(.+)$/);\n  var challengeString = '';\n\n  if (!challengeMatch) {\n    return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH NTLM'));\n  } else {\n    challengeString = challengeMatch[1];\n  }\n\n  if (!/^NTLM/i.test(challengeString)) {\n    challengeString = 'NTLM ' + challengeString;\n  }\n\n  var type2Message = ntlm.parseType2Message(challengeString, callback);\n\n  if (!type2Message) {\n    return;\n  }\n\n  var type3Message = ntlm.createType3Message(type2Message, {\n    domain: this._auth.domain || '',\n    workstation: this._auth.workstation || '',\n    username: this._auth.user,\n    password: this._auth.pass\n  });\n  type3Message = type3Message.substring(5); // remove the \"NTLM \" prefix\n\n  this._responseActions.push(function (str) {\n    this._actionAUTH_NTLM_TYPE3(str, callback);\n  }.bind(this));\n\n  this._sendCommand(type3Message);\n};\n/**\n * Handle the response for AUTH CRAM-MD5 command. We are expecting\n * '334 <challenge string>'. Data to be sent as response needs to be\n * base64 decoded challenge string, MD5 hashed using the password as\n * a HMAC key, prefixed by the username and a space, and finally all\n * base64 encoded again.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_CRAM_MD5 = function (str, callback) {\n  var challengeMatch = str.match(/^334\\s+(.+)$/);\n  var challengeString = '';\n\n  if (!challengeMatch) {\n    return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n  } else {\n    challengeString = challengeMatch[1];\n  } // Decode from base64\n\n\n  var base64decoded = new Buffer(challengeString, 'base64').toString('ascii'),\n      hmac_md5 = crypto.createHmac('md5', this._auth.pass);\n  hmac_md5.update(base64decoded);\n  var hex_hmac = hmac_md5.digest('hex'),\n      prepended = this._auth.user + ' ' + hex_hmac;\n\n  this._responseActions.push(function (str) {\n    this._actionAUTH_CRAM_MD5_PASS(str, callback);\n  }.bind(this));\n\n  this._sendCommand(new Buffer(prepended).toString('base64'));\n};\n/**\n * Handles the response to CRAM-MD5 authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_CRAM_MD5_PASS = function (str, callback) {\n  if (!str.match(/^235\\s+/)) {\n    return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n  }\n\n  this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n  this.authenticated = true;\n  callback(null, true);\n};\n/**\n * Handles the TYPE3 response for NTLM authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_NTLM_TYPE3 = function (str, callback) {\n  if (!str.match(/^235\\s+/)) {\n    return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH NTLM'));\n  }\n\n  this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n  this.authenticated = true;\n  callback(null, true);\n};\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n * response needs to be base64 encoded password.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_LOGIN_PASS = function (str, callback) {\n  if (str !== '334 UGFzc3dvcmQ6') {\n    return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n  }\n\n  this._responseActions.push(function (str) {\n    this._actionAUTHComplete(str, callback);\n  }.bind(this));\n\n  this._sendCommand(new Buffer(this._auth.pass + '', 'utf-8').toString('base64'));\n};\n/**\n * Handles the response for authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTHComplete = function (str, isRetry, callback) {\n  if (!callback && typeof isRetry === 'function') {\n    callback = isRetry;\n    isRetry = undefined;\n  }\n\n  if (str.substr(0, 3) === '334') {\n    this._responseActions.push(function (str) {\n      if (isRetry || !this._auth.xoauth2 || typeof this._auth.xoauth2 !== 'object') {\n        this._actionAUTHComplete(str, true, callback);\n      } else {\n        setTimeout(this._handleXOauth2Token.bind(this, true, callback), Math.random() * 4000 + 1000);\n      }\n    }.bind(this));\n\n    this._sendCommand('');\n\n    return;\n  }\n\n  if (str.charAt(0) !== '2') {\n    this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n    return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n  }\n\n  this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n  this.authenticated = true;\n  callback(null, true);\n};\n/**\n * Handle response for a MAIL FROM: command\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionMAIL = function (str, callback) {\n  var message, curRecipient;\n\n  if (Number(str.charAt(0)) !== 2) {\n    if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n      message = 'Internationalized mailbox name not allowed';\n    } else {\n      message = 'Mail command failed';\n    }\n\n    return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n  }\n\n  if (!this._envelope.rcptQueue.length) {\n    return callback(this._formatError('Can\\'t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n  } else {\n    this._recipientQueue = [];\n\n    if (this._supportedExtensions.indexOf('PIPELINING') >= 0) {\n      while (this._envelope.rcptQueue.length) {\n        curRecipient = this._envelope.rcptQueue.shift();\n\n        this._recipientQueue.push(curRecipient);\n\n        this._responseActions.push(function (str) {\n          this._actionRCPT(str, callback);\n        }.bind(this));\n\n        this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n      }\n    } else {\n      curRecipient = this._envelope.rcptQueue.shift();\n\n      this._recipientQueue.push(curRecipient);\n\n      this._responseActions.push(function (str) {\n        this._actionRCPT(str, callback);\n      }.bind(this));\n\n      this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n    }\n  }\n};\n/**\n * Handle response for a RCPT TO: command\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionRCPT = function (str, callback) {\n  var message,\n      err,\n      curRecipient = this._recipientQueue.shift();\n\n  if (Number(str.charAt(0)) !== 2) {\n    // this is a soft error\n    if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n      message = 'Internationalized mailbox name not allowed';\n    } else {\n      message = 'Recipient command failed';\n    }\n\n    this._envelope.rejected.push(curRecipient); // store error for the failed recipient\n\n\n    err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n    err.recipient = curRecipient;\n\n    this._envelope.rejectedErrors.push(err);\n  } else {\n    this._envelope.accepted.push(curRecipient);\n  }\n\n  if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n    if (this._envelope.rejected.length < this._envelope.to.length) {\n      this._responseActions.push(function (str) {\n        this._actionDATA(str, callback);\n      }.bind(this));\n\n      this._sendCommand('DATA');\n    } else {\n      err = this._formatError('Can\\'t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n      err.rejected = this._envelope.rejected;\n      err.rejectedErrors = this._envelope.rejectedErrors;\n      return callback(err);\n    }\n  } else if (this._envelope.rcptQueue.length) {\n    curRecipient = this._envelope.rcptQueue.shift();\n\n    this._recipientQueue.push(curRecipient);\n\n    this._responseActions.push(function (str) {\n      this._actionRCPT(str, callback);\n    }.bind(this));\n\n    this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n  }\n};\n/**\n * Handle response for a DATA command\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionDATA = function (str, callback) {\n  // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n  // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n  if ([2, 3].indexOf(Number(str.charAt(0))) < 0) {\n    return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n  }\n\n  var response = {\n    accepted: this._envelope.accepted,\n    rejected: this._envelope.rejected\n  };\n\n  if (this._envelope.rejectedErrors.length) {\n    response.rejectedErrors = this._envelope.rejectedErrors;\n  }\n\n  callback(null, response);\n};\n/**\n * Handle response for a DATA stream when using SMTP\n * We expect a single response that defines if the sending succeeded or failed\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionSMTPStream = function (str, callback) {\n  if (Number(str.charAt(0)) !== 2) {\n    // Message failed\n    return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n  } else {\n    // Message sent succesfully\n    return callback(null, str);\n  }\n};\n/**\n * Handle response for a DATA stream\n * We expect a separate response for every recipient. All recipients can either\n * succeed or fail separately\n *\n * @param {String} recipient The recipient this response applies to\n * @param {Boolean} final Is this the final recipient?\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionLMTPStream = function (recipient, final, str, callback) {\n  var err;\n\n  if (Number(str.charAt(0)) !== 2) {\n    // Message failed\n    err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n    err.recipient = recipient;\n\n    this._envelope.rejected.push(recipient);\n\n    this._envelope.rejectedErrors.push(err);\n\n    for (var i = 0, len = this._envelope.accepted.length; i < len; i++) {\n      if (this._envelope.accepted[i] === recipient) {\n        this._envelope.accepted.splice(i, 1);\n      }\n    }\n  }\n\n  if (final) {\n    return callback(null, str);\n  }\n};\n\nSMTPConnection.prototype._handleXOauth2Token = function (isRetry, callback) {\n  this._responseActions.push(function (str) {\n    this._actionAUTHComplete(str, isRetry, callback);\n  }.bind(this));\n\n  if (this._auth.xoauth2 && typeof this._auth.xoauth2 === 'object') {\n    this._auth.xoauth2[isRetry ? 'generateToken' : 'getToken'](function (err, token) {\n      if (err) {\n        this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n        return callback(this._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n      }\n\n      this._sendCommand('AUTH XOAUTH2 ' + token);\n    }.bind(this));\n  } else {\n    this._sendCommand('AUTH XOAUTH2 ' + this._buildXOAuth2Token(this._auth.user, this._auth.xoauth2));\n  }\n};\n/**\n * Builds a login token for XOAUTH2 authentication command\n *\n * @param {String} user E-mail address of the user\n * @param {String} token Valid access token for the user\n * @return {String} Base64 formatted login token\n */\n\n\nSMTPConnection.prototype._buildXOAuth2Token = function (user, token) {\n  var authData = ['user=' + (user || ''), 'auth=Bearer ' + token, '', ''];\n  return new Buffer(authData.join('\\x01')).toString('base64');\n};\n\nSMTPConnection.prototype._getHostname = function () {\n  // defaul hostname is machine hostname or [IP]\n  var defaultHostname = os.hostname() || ''; // ignore if not FQDN\n\n  if (defaultHostname.indexOf('.') < 0) {\n    defaultHostname = '[127.0.0.1]';\n  } // IP should be enclosed in []\n\n\n  if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n    defaultHostname = '[' + defaultHostname + ']';\n  }\n\n  return defaultHostname;\n};","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/GRP/frontend/node_modules/smtp-connection/lib/smtp-connection.js"],"names":["packageInfo","require","EventEmitter","util","net","tls","os","crypto","DataStream","PassThrough","shared","ntlm","CONNECTION_TIMEOUT","SOCKET_TIMEOUT","GREETING_TIMEOUT","module","exports","SMTPConnection","options","call","id","randomBytes","toString","replace","stage","secureConnection","secure","alreadySecured","secured","port","host","name","_getHostname","logger","getLogger","version","authenticated","destroyed","_remainder","_responseQueue","_socket","_supportedAuth","_envelope","_supportedExtensions","_maxAllowedSize","_responseActions","_recipientQueue","_greetingTimeout","_connectionTimeout","_destroyed","_closing","inherits","prototype","connect","connectCallback","once","debug","bind","opts","localAddress","connection","setImmediate","_upgradeConnection","err","_onError","Error","message","_onConnect","socket","E","Object","keys","forEach","key","setTimeout","connectionTimeout","on","quit","_sendCommand","push","close","clearTimeout","closeMethod","_destroy","login","authData","callback","_auth","_user","xoauth2","user","_authMethod","authMethod","toUpperCase","trim","indexOf","domain","_handleXOauth2Token","str","_actionAUTH_LOGIN_USER","_actionAUTHComplete","Buffer","pass","_actionAUTH_CRAM_MD5","_actionAUTH_NTLM_TYPE1","createType1Message","workstation","_formatError","send","envelope","done","size","returned","apply","Array","slice","arguments","_setEnvelope","info","stream","_createSendStream","response","pipe","write","end","reset","charAt","remoteAddress","remotePort","removeAllListeners","_onData","_onClose","_onEnd","socketTimeout","_onTimeout","_actionGreeting","greetingTimeout","resume","chunk","length","data","lines","split","lastline","pop","i","len","test","_processResponse","type","command","error","emit","code","responseCode","Number","match","socketPlain","shift","action","args","useSmtpUtf8","from","address","to","concat","map","JSON","stringify","rcptQueue","parse","rejected","rejectedErrors","accepted","dsn","_setDsnEnvelope","_actionMAIL","_usingSmtpUtf8","use8BitMime","_using8BitMime","ret","envid","join","params","notify","n","validNotify","invaliNotify","filter","orcpt","_getDsnRcptToArgs","dataStream","logStream","lmtp","recipient","final","_actionLMTPStream","_actionSMTPStream","read","outByteCount","inByteCount","substr","_actionLHLO","_actionEHLO","requireTLS","_actionHELO","ignoreTLS","_actionSTARTTLS","opportunisticTLS","_actionAUTH_LOGIN_PASS","challengeMatch","challengeString","type2Message","parseType2Message","type3Message","createType3Message","username","password","substring","_actionAUTH_NTLM_TYPE3","base64decoded","hmac_md5","createHmac","update","hex_hmac","digest","prepended","_actionAUTH_CRAM_MD5_PASS","isRetry","undefined","Math","random","curRecipient","_actionRCPT","_actionDATA","splice","token","_buildXOAuth2Token","defaultHostname","hostname"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YAArC;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAII,GAAG,GAAGJ,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIK,EAAE,GAAGL,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIO,UAAU,GAAGP,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIQ,WAAW,GAAGR,OAAO,CAAC,QAAD,CAAP,CAAkBQ,WAApC;;AACA,IAAIC,MAAM,GAAGT,OAAO,CAAC,mBAAD,CAApB;;AACA,IAAIU,IAAI,GAAGV,OAAO,CAAC,eAAD,CAAlB,C,CAEA;;;AACA,IAAIW,kBAAkB,GAAG,IAAI,EAAJ,GAAS,IAAlC,C,CAAwC;;AACxC,IAAIC,cAAc,GAAG,KAAK,EAAL,GAAU,IAA/B,C,CAAqC;;AACrC,IAAIC,gBAAgB,GAAG,KAAK,IAA5B,C,CAAkC;;AAElCC,MAAM,CAACC,OAAP,GAAiBC,cAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;AAC7BhB,EAAAA,YAAY,CAACiB,IAAb,CAAkB,IAAlB;AAEA,OAAKC,EAAL,GAAUb,MAAM,CAACc,WAAP,CAAmB,CAAnB,EAAsBC,QAAtB,CAA+B,QAA/B,EAAyCC,OAAzC,CAAiD,KAAjD,EAAwD,EAAxD,CAAV;AACA,OAAKC,KAAL,GAAa,MAAb;AAEA,OAAKN,OAAL,GAAeA,OAAO,IAAI,EAA1B;AAEA,OAAKO,gBAAL,GAAwB,CAAC,CAAC,KAAKP,OAAL,CAAaQ,MAAvC;AACA,OAAKC,cAAL,GAAsB,CAAC,CAAC,KAAKT,OAAL,CAAaU,OAArC;AAEA,OAAKC,IAAL,GAAY,KAAKX,OAAL,CAAaW,IAAb,KAAsB,KAAKJ,gBAAL,GAAwB,GAAxB,GAA8B,EAApD,CAAZ;AACA,OAAKK,IAAL,GAAY,KAAKZ,OAAL,CAAaY,IAAb,IAAqB,WAAjC;;AAEA,MAAI,OAAO,KAAKZ,OAAL,CAAaQ,MAApB,KAA+B,WAA/B,IAA8C,KAAKG,IAAL,KAAc,GAAhE,EAAqE;AACjE;AACA,SAAKJ,gBAAL,GAAwB,IAAxB;AACH;;AAED,OAAKM,IAAL,GAAY,KAAKb,OAAL,CAAaa,IAAb,IAAqB,KAAKC,YAAL,EAAjC;AAEA,OAAKC,MAAL,GAAcvB,MAAM,CAACwB,SAAP,CAAiB,KAAKhB,OAAtB,CAAd;AAEA;;;;;AAIA,OAAKiB,OAAL,GAAenC,WAAW,CAACmC,OAA3B;AAEA;;;;;AAIA,OAAKC,aAAL,GAAqB,KAArB;AAEA;;;;;AAIA,OAAKC,SAAL,GAAiB,KAAjB;AAEA;;;;;;AAKA,OAAKX,MAAL,GAAc,CAAC,CAAC,KAAKD,gBAArB;AAEA;;;;;AAIA,OAAKa,UAAL,GAAkB,EAAlB;AAEA;;;;;AAIA,OAAKC,cAAL,GAAsB,EAAtB;AAEA;;;;;AAIA,OAAKC,OAAL,GAAe,KAAf;AAEA;;;;;AAIA,OAAKC,cAAL,GAAsB,EAAtB;AAEA;;;;;AAIA,OAAKC,SAAL,GAAiB,KAAjB;AAEA;;;;;AAIA,OAAKC,oBAAL,GAA4B,EAA5B;AAEA;;;;;AAIA,OAAKC,eAAL,GAAuB,CAAvB;AAEA;;;;;AAIA,OAAKC,gBAAL,GAAwB,EAAxB;AACA,OAAKC,eAAL,GAAuB,EAAvB;AAEA;;;;;AAIA,OAAKC,gBAAL,GAAwB,KAAxB;AAEA;;;;;AAIA,OAAKC,kBAAL,GAA0B,KAA1B;AAEA;;;;;AAIA,OAAKC,UAAL,GAAkB,KAAlB;AAEA;;;;;AAIA,OAAKC,QAAL,GAAgB,KAAhB;AACH;;AACD/C,IAAI,CAACgD,QAAL,CAAclC,cAAd,EAA8Bf,YAA9B;AAEA;;;;;AAIAe,cAAc,CAACmC,SAAf,CAAyBC,OAAzB,GAAmC,UAAUC,eAAV,EAA2B;AAC1D,MAAI,OAAOA,eAAP,KAA2B,UAA/B,EAA2C;AACvC,SAAKC,IAAL,CAAU,SAAV,EAAqB,YAAY;AAC7B,WAAKtB,MAAL,CAAYuB,KAAZ,CAAkB,8BAAlB,EAAkD,KAAKpC,EAAvD;AACAkC,MAAAA,eAAe;AAClB,KAHoB,CAGnBG,IAHmB,CAGd,IAHc,CAArB;AAIH;;AAED,MAAIC,IAAI,GAAG;AACP7B,IAAAA,IAAI,EAAE,KAAKA,IADJ;AAEPC,IAAAA,IAAI,EAAE,KAAKA;AAFJ,GAAX;;AAKA,MAAI,KAAKZ,OAAL,CAAayC,YAAjB,EAA+B;AAC3BD,IAAAA,IAAI,CAACC,YAAL,GAAoB,KAAKzC,OAAL,CAAayC,YAAjC;AACH;;AAED,MAAI,KAAKzC,OAAL,CAAa0C,UAAjB,EAA6B;AACzB;AACA,SAAKpB,OAAL,GAAe,KAAKtB,OAAL,CAAa0C,UAA5B;;AACA,QAAI,KAAKnC,gBAAL,IAAyB,CAAC,KAAKE,cAAnC,EAAmD;AAC/CkC,MAAAA,YAAY,CAAC,KAAKC,kBAAL,CAAwBL,IAAxB,CAA6B,IAA7B,EAAmC,UAAUM,GAAV,EAAe;AAC3D,YAAIA,GAAJ,EAAS;AACL,eAAKC,QAAL,CAAc,IAAIC,KAAJ,CAAU,6BAA6BF,GAAG,CAACG,OAAJ,IAAeH,GAA5C,CAAV,CAAd,EAA2E,MAA3E,EAAmF,KAAnF,EAA0F,MAA1F;;AACA;AACH;;AACD,aAAKI,UAAL;AACH,OAN+C,CAM9CV,IAN8C,CAMzC,IANyC,CAAnC,CAAD,CAAZ;AAOH,KARD,MAQO;AACHI,MAAAA,YAAY,CAAC,KAAKM,UAAL,CAAgBV,IAAhB,CAAqB,IAArB,CAAD,CAAZ;AACH;AACJ,GAdD,MAcO,IAAI,KAAKvC,OAAL,CAAakD,MAAjB,EAAyB;AAC5B;AACA,SAAK5B,OAAL,GAAe,KAAKtB,OAAL,CAAakD,MAA5B;;AACA,QAAI;AACA,WAAK5B,OAAL,CAAaa,OAAb,CAAqB,KAAKxB,IAA1B,EAAgC,KAAKC,IAArC,EAA2C,KAAKqC,UAAL,CAAgBV,IAAhB,CAAqB,IAArB,CAA3C;AACH,KAFD,CAEE,OAAOY,CAAP,EAAU;AACR,aAAOR,YAAY,CAAC,KAAKG,QAAL,CAAcP,IAAd,CAAmB,IAAnB,EAAyBY,CAAzB,EAA4B,aAA5B,EAA2C,KAA3C,EAAkD,MAAlD,CAAD,CAAnB;AACH;AACJ,GARM,MAQA,IAAI,KAAK5C,gBAAT,EAA2B;AAC9B;AACA,QAAI,KAAKP,OAAL,CAAab,GAAjB,EAAsB;AAClBiE,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKrD,OAAL,CAAab,GAAzB,EAA8BmE,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AACjDf,QAAAA,IAAI,CAACe,GAAD,CAAJ,GAAY,KAAKvD,OAAL,CAAab,GAAb,CAAiBoE,GAAjB,CAAZ;AACH,OAFqC,CAEpChB,IAFoC,CAE/B,IAF+B,CAAtC;AAGH;;AACD,QAAI;AACA,WAAKjB,OAAL,GAAenC,GAAG,CAACgD,OAAJ,CAAY,KAAKxB,IAAjB,EAAuB,KAAKC,IAA5B,EAAkC4B,IAAlC,EAAwC,KAAKS,UAAL,CAAgBV,IAAhB,CAAqB,IAArB,CAAxC,CAAf;AACH,KAFD,CAEE,OAAOY,CAAP,EAAU;AACR,aAAOR,YAAY,CAAC,KAAKG,QAAL,CAAcP,IAAd,CAAmB,IAAnB,EAAyBY,CAAzB,EAA4B,aAA5B,EAA2C,KAA3C,EAAkD,MAAlD,CAAD,CAAnB;AACH;AACJ,GAZM,MAYA;AACH;AACA,QAAI;AACA,WAAK7B,OAAL,GAAepC,GAAG,CAACiD,OAAJ,CAAYK,IAAZ,EAAkB,KAAKS,UAAL,CAAgBV,IAAhB,CAAqB,IAArB,CAAlB,CAAf;AACH,KAFD,CAEE,OAAOY,CAAP,EAAU;AACR,aAAOR,YAAY,CAAC,KAAKG,QAAL,CAAcP,IAAd,CAAmB,IAAnB,EAAyBY,CAAzB,EAA4B,aAA5B,EAA2C,KAA3C,EAAkD,MAAlD,CAAD,CAAnB;AACH;AACJ;;AAED,OAAKrB,kBAAL,GAA0B0B,UAAU,CAAC,YAAY;AAC7C,SAAKV,QAAL,CAAc,oBAAd,EAAoC,WAApC,EAAiD,KAAjD,EAAwD,MAAxD;AACH,GAFoC,CAEnCP,IAFmC,CAE9B,IAF8B,CAAD,EAEtB,KAAKvC,OAAL,CAAayD,iBAAb,IAAkC/D,kBAFZ,CAApC;;AAIA,OAAK4B,OAAL,CAAaoC,EAAb,CAAgB,OAAhB,EAAyB,UAAUb,GAAV,EAAe;AACpC,SAAKC,QAAL,CAAcD,GAAd,EAAmB,aAAnB,EAAkC,KAAlC,EAAyC,MAAzC;AACH,GAFwB,CAEvBN,IAFuB,CAElB,IAFkB,CAAzB;AAGH,CAnED;AAqEA;;;;;AAGAxC,cAAc,CAACmC,SAAf,CAAyByB,IAAzB,GAAgC,YAAY;AACxC,OAAKC,YAAL,CAAkB,MAAlB;;AACA,OAAKjC,gBAAL,CAAsBkC,IAAtB,CAA2B,KAAKC,KAAhC;AACH,CAHD;AAKA;;;;;AAGA/D,cAAc,CAACmC,SAAf,CAAyB4B,KAAzB,GAAiC,YAAY;AACzCC,EAAAA,YAAY,CAAC,KAAKjC,kBAAN,CAAZ;AACAiC,EAAAA,YAAY,CAAC,KAAKlC,gBAAN,CAAZ;AACA,OAAKF,gBAAL,GAAwB,EAAxB,CAHyC,CAKzC;;AACA,MAAI,KAAKK,QAAT,EAAmB;AACf;AACH;;AACD,OAAKA,QAAL,GAAgB,IAAhB;AAEA,MAAIgC,WAAW,GAAG,KAAlB;;AAEA,MAAI,KAAK1D,KAAL,KAAe,MAAnB,EAA2B;AACvB;AACA0D,IAAAA,WAAW,GAAG,SAAd;AACH;;AAED,OAAKjD,MAAL,CAAYuB,KAAZ,CAAkB,kDAAlB,EAAsE,KAAKpC,EAA3E,EAA+E8D,WAA/E;AAEA,MAAId,MAAM,GAAG,KAAK5B,OAAL,IAAgB,KAAKA,OAAL,CAAa4B,MAA7B,IAAuC,KAAK5B,OAAzD;;AAEA,MAAI4B,MAAM,IAAI,CAACA,MAAM,CAAC/B,SAAtB,EAAiC;AAC7B,QAAI;AACA,WAAKG,OAAL,CAAa0C,WAAb;AACH,KAFD,CAEE,OAAOb,CAAP,EAAU,CACR;AACH;AACJ;;AAED,OAAKc,QAAL;AACH,CA/BD;AAiCA;;;;;AAGAlE,cAAc,CAACmC,SAAf,CAAyBgC,KAAzB,GAAiC,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAC3D,OAAKC,KAAL,GAAaF,QAAQ,IAAI,EAAzB;AACA,OAAKG,KAAL,GAAa,KAAKD,KAAL,CAAWE,OAAX,IAAsB,KAAKF,KAAL,CAAWE,OAAX,CAAmBvE,OAAzC,IAAoD,KAAKqE,KAAL,CAAWE,OAAX,CAAmBvE,OAAnB,CAA2BwE,IAA/E,IAAuF,KAAKH,KAAL,CAAWG,IAAlG,IAA0G,EAAvH;AAEA,OAAKC,WAAL,GAAmB,KAAnB;;AACA,MAAI,KAAKzE,OAAL,CAAa0E,UAAjB,EAA6B;AACzB,SAAKD,WAAL,GAAmB,KAAKzE,OAAL,CAAa0E,UAAb,CAAwBC,WAAxB,GAAsCC,IAAtC,EAAnB;AACH,GAFD,MAEO,IAAI,KAAKP,KAAL,CAAWE,OAAX,IAAsB,KAAKhD,cAAL,CAAoBsD,OAApB,CAA4B,SAA5B,KAA0C,CAApE,EAAuE;AAC1E,SAAKJ,WAAL,GAAmB,SAAnB;AACH,GAFM,MAEA,IAAI,KAAKJ,KAAL,CAAWS,MAAX,IAAqB,KAAKvD,cAAL,CAAoBsD,OAApB,CAA4B,MAA5B,KAAuC,CAAhE,EAAmE;AACtE,SAAKJ,WAAL,GAAmB,MAAnB;AACH,GAFM,MAEA;AACH;AACA,SAAKA,WAAL,GAAmB,CAAC,KAAKlD,cAAL,CAAoB,CAApB,KAA0B,OAA3B,EAAoCoD,WAApC,GAAkDC,IAAlD,EAAnB;AACH;;AAED,UAAQ,KAAKH,WAAb;AACI,SAAK,SAAL;AACI,WAAKM,mBAAL,CAAyB,KAAzB,EAAgCX,QAAhC;;AACA;;AACJ,SAAK,OAAL;AACI,WAAKzC,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,aAAKC,sBAAL,CAA4BD,GAA5B,EAAiCZ,QAAjC;AACH,OAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,WAAKqB,YAAL,CAAkB,YAAlB;;AACA;;AACJ,SAAK,OAAL;AACI,WAAKjC,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,aAAKE,mBAAL,CAAyBF,GAAzB,EAA8BZ,QAA9B;AACH,OAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,WAAKqB,YAAL,CAAkB,gBAAgB,IAAIuB,MAAJ,EAC9B;AACA,iBAAW;AACX,WAAKd,KAAL,CAAWG,IADX,GACkB,QADlB,GAEA,KAAKH,KAAL,CAAWe,IAJmB,EAIb,OAJa,EAIJhF,QAJI,CAIK,QAJL,CAAlC;;AAKA;;AACJ,SAAK,UAAL;AACI,WAAKuB,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,aAAKK,oBAAL,CAA0BL,GAA1B,EAA+BZ,QAA/B;AACH,OAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,WAAKqB,YAAL,CAAkB,eAAlB;;AACA;;AACJ,SAAK,MAAL;AACI,WAAKjC,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,aAAKM,sBAAL,CAA4BN,GAA5B,EAAiCZ,QAAjC;AACH,OAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,WAAKqB,YAAL,CAAkB,UAAUnE,IAAI,CAAC8F,kBAAL,CAAwB;AAChDT,QAAAA,MAAM,EAAE,KAAKT,KAAL,CAAWS,MAAX,IAAqB,EADmB;AAEhDU,QAAAA,WAAW,EAAE,KAAKnB,KAAL,CAAWmB,WAAX,IAA0B;AAFS,OAAxB,CAA5B;;AAIA;AAlCR;;AAqCA,SAAOpB,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,oCAAoC,KAAKhB,WAAzC,GAAuD,GAAzE,EAA8E,OAA9E,EAAuF,KAAvF,EAA8F,KAA9F,CAAD,CAAf;AACH,CAtDD;AAwDA;;;;;;;;;AAOA1E,cAAc,CAACmC,SAAf,CAAyBwD,IAAzB,GAAgC,UAAUC,QAAV,EAAoB3C,OAApB,EAA6B4C,IAA7B,EAAmC;AAC/D,MAAI,CAAC5C,OAAL,EAAc;AACV,WAAO4C,IAAI,CAAC,KAAKH,YAAL,CAAkB,eAAlB,EAAmC,UAAnC,EAA+C,KAA/C,EAAsD,KAAtD,CAAD,CAAX;AACH,GAH8D,CAK/D;;;AACA,MAAI,KAAK/D,eAAL,IAAwBiE,QAAQ,CAACE,IAAT,GAAgB,KAAKnE,eAAjD,EAAkE;AAC9D,WAAOiB,YAAY,CAAC,YAAY;AAC5BiD,MAAAA,IAAI,CAAC,KAAKH,YAAL,CAAkB,sCAAsC,KAAK/D,eAA7D,EAA8E,UAA9E,EAA0F,KAA1F,EAAiG,WAAjG,CAAD,CAAJ;AACH,KAFmB,CAElBa,IAFkB,CAEb,IAFa,CAAD,CAAnB;AAGH,GAV8D,CAY/D;;;AACA,MAAIuD,QAAQ,GAAG,KAAf;;AACA,MAAI1B,QAAQ,GAAG,YAAY;AACvB,QAAI0B,QAAJ,EAAc;AACV;AACH;;AACDA,IAAAA,QAAQ,GAAG,IAAX;AAEAF,IAAAA,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBC,KAAK,CAAC9D,SAAN,CAAgB+D,KAAhB,CAAsBhG,IAAtB,CAA2BiG,SAA3B,CAAjB;AACH,GAPD;;AASA,MAAI,OAAOlD,OAAO,CAACU,EAAf,KAAsB,UAA1B,EAAsC;AAClCV,IAAAA,OAAO,CAACU,EAAR,CAAW,OAAX,EAAoB,UAAUb,GAAV,EAAe;AAC/B,aAAOuB,QAAQ,CAAC,KAAKqB,YAAL,CAAkB5C,GAAlB,EAAuB,SAAvB,EAAkC,KAAlC,EAAyC,KAAzC,CAAD,CAAf;AACH,KAFmB,CAElBN,IAFkB,CAEb,IAFa,CAApB;AAGH;;AAED,OAAK4D,YAAL,CAAkBR,QAAlB,EAA4B,UAAU9C,GAAV,EAAeuD,IAAf,EAAqB;AAC7C,QAAIvD,GAAJ,EAAS;AACL,aAAOuB,QAAQ,CAACvB,GAAD,CAAf;AACH;;AACD,QAAIwD,MAAM,GAAG,KAAKC,iBAAL,CAAuB,UAAUzD,GAAV,EAAemC,GAAf,EAAoB;AACpD,UAAInC,GAAJ,EAAS;AACL,eAAOuB,QAAQ,CAACvB,GAAD,CAAf;AACH;;AACDuD,MAAAA,IAAI,CAACG,QAAL,GAAgBvB,GAAhB;AACA,aAAOZ,QAAQ,CAAC,IAAD,EAAOgC,IAAP,CAAf;AACH,KANY,CAAb;;AAOA,QAAI,OAAOpD,OAAO,CAACwD,IAAf,KAAwB,UAA5B,EAAwC;AACpCxD,MAAAA,OAAO,CAACwD,IAAR,CAAaH,MAAb;AACH,KAFD,MAEO;AACHA,MAAAA,MAAM,CAACI,KAAP,CAAazD,OAAb;AACAqD,MAAAA,MAAM,CAACK,GAAP;AACH;AAEJ,GAlB2B,CAkB1BnE,IAlB0B,CAkBrB,IAlBqB,CAA5B;AAmBH,CAhDD;AAkDA;;;;;;;AAKAxC,cAAc,CAACmC,SAAf,CAAyByE,KAAzB,GAAiC,UAAUvC,QAAV,EAAoB;AACjD,OAAKR,YAAL,CAAkB,MAAlB;;AACA,OAAKjC,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,QAAIA,GAAG,CAAC4B,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvB,aAAOxC,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,qCAAqCT,GAAvD,EAA4D,WAA5D,EAAyEA,GAAzE,EAA8E,MAA9E,CAAD,CAAf;AACH;;AACD,SAAKxD,SAAL,GAAiB,KAAjB;AACA,WAAO4C,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACH,GAN0B,CAMzB7B,IANyB,CAMpB,IANoB,CAA3B;AAOH,CATD;AAWA;;;;;;;;AAMAxC,cAAc,CAACmC,SAAf,CAAyBe,UAAzB,GAAsC,YAAY;AAC9Cc,EAAAA,YAAY,CAAC,KAAKjC,kBAAN,CAAZ;AAEA,OAAKf,MAAL,CAAYqF,IAAZ,CAAiB,8BAAjB,EAAiD,KAAKlG,EAAtD,EAA0D,KAAKM,MAAL,GAAc,mBAAd,GAAoC,YAA9F,EAA4G,KAAKc,OAAL,CAAauF,aAAzH,EAAwI,KAAKvF,OAAL,CAAawF,UAArJ;;AAEA,MAAI,KAAK/E,UAAT,EAAqB;AACjB;AACA,SAAK+B,KAAL;AACA;AACH;;AAED,OAAKxD,KAAL,GAAa,WAAb,CAX8C,CAa9C;;AACA,OAAKgB,OAAL,CAAayF,kBAAb,CAAgC,MAAhC;;AACA,OAAKzF,OAAL,CAAayF,kBAAb,CAAgC,SAAhC;;AACA,OAAKzF,OAAL,CAAayF,kBAAb,CAAgC,OAAhC;;AACA,OAAKzF,OAAL,CAAayF,kBAAb,CAAgC,KAAhC;;AAEA,OAAKzF,OAAL,CAAaoC,EAAb,CAAgB,MAAhB,EAAwB,KAAKsD,OAAL,CAAazE,IAAb,CAAkB,IAAlB,CAAxB;;AACA,OAAKjB,OAAL,CAAae,IAAb,CAAkB,OAAlB,EAA2B,KAAK4E,QAAL,CAAc1E,IAAd,CAAmB,IAAnB,CAA3B;;AACA,OAAKjB,OAAL,CAAae,IAAb,CAAkB,KAAlB,EAAyB,KAAK6E,MAAL,CAAY3E,IAAZ,CAAiB,IAAjB,CAAzB;;AAEA,OAAKjB,OAAL,CAAakC,UAAb,CAAwB,KAAKxD,OAAL,CAAamH,aAAb,IAA8BxH,cAAtD;;AACA,OAAK2B,OAAL,CAAaoC,EAAb,CAAgB,SAAhB,EAA2B,KAAK0D,UAAL,CAAgB7E,IAAhB,CAAqB,IAArB,CAA3B;;AAEA,OAAKV,gBAAL,GAAwB2B,UAAU,CAAC,YAAY;AAC3C;AACA,QAAI,KAAKlC,OAAL,IAAgB,CAAC,KAAKS,UAAtB,IAAoC,KAAKJ,gBAAL,CAAsB,CAAtB,MAA6B,KAAK0F,eAA1E,EAA2F;AACvF,WAAKvE,QAAL,CAAc,yBAAd,EAAyC,WAAzC,EAAsD,KAAtD,EAA6D,MAA7D;AACH;AACJ,GALkC,CAKjCP,IALiC,CAK5B,IAL4B,CAAD,EAKpB,KAAKvC,OAAL,CAAasH,eAAb,IAAgC1H,gBALZ,CAAlC;;AAOA,OAAK+B,gBAAL,CAAsBkC,IAAtB,CAA2B,KAAKwD,eAAhC,EAjC8C,CAmC9C;;;AACA,OAAK/F,OAAL,CAAaiG,MAAb;AACH,CArCD;AAuCA;;;;;;;;AAMAxH,cAAc,CAACmC,SAAf,CAAyB8E,OAAzB,GAAmC,UAAUQ,KAAV,EAAiB;AAChD,MAAI,KAAKzF,UAAL,IAAmB,CAACyF,KAApB,IAA6B,CAACA,KAAK,CAACC,MAAxC,EAAgD;AAC5C;AACH;;AAED,MAAIC,IAAI,GAAG,CAACF,KAAK,IAAI,EAAV,EAAcpH,QAAd,CAAuB,QAAvB,CAAX;AACA,MAAIuH,KAAK,GAAG,CAAC,KAAKvG,UAAL,GAAkBsG,IAAnB,EAAyBE,KAAzB,CAA+B,OAA/B,CAAZ;AACA,MAAIC,QAAJ;AAEA,OAAKzG,UAAL,GAAkBuG,KAAK,CAACG,GAAN,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,KAAK,CAACF,MAA5B,EAAoCM,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C,QAAI,KAAK1G,cAAL,CAAoBoG,MAAxB,EAAgC;AAC5BI,MAAAA,QAAQ,GAAG,KAAKxG,cAAL,CAAoB,KAAKA,cAAL,CAAoBoG,MAApB,GAA6B,CAAjD,CAAX;;AACA,UAAI,SAASQ,IAAT,CAAcJ,QAAQ,CAACD,KAAT,CAAe,IAAf,EAAqBE,GAArB,EAAd,CAAJ,EAA+C;AAC3C,aAAKzG,cAAL,CAAoB,KAAKA,cAAL,CAAoBoG,MAApB,GAA6B,CAAjD,KAAuD,OAAOE,KAAK,CAACI,CAAD,CAAnE;AACA;AACH;AACJ;;AACD,SAAK1G,cAAL,CAAoBwC,IAApB,CAAyB8D,KAAK,CAACI,CAAD,CAA9B;AACH;;AAED,OAAKG,gBAAL;AACH,CAvBD;AAyBA;;;;;;;;;AAOAnI,cAAc,CAACmC,SAAf,CAAyBY,QAAzB,GAAoC,UAAUD,GAAV,EAAesF,IAAf,EAAqBT,IAArB,EAA2BU,OAA3B,EAAoC;AACpErE,EAAAA,YAAY,CAAC,KAAKjC,kBAAN,CAAZ;AACAiC,EAAAA,YAAY,CAAC,KAAKlC,gBAAN,CAAZ;;AAEA,MAAI,KAAKE,UAAT,EAAqB;AACjB;AACA;AACA;AACA;AACH;;AAEDc,EAAAA,GAAG,GAAG,KAAK4C,YAAL,CAAkB5C,GAAlB,EAAuBsF,IAAvB,EAA6BT,IAA7B,EAAmCU,OAAnC,CAAN;AAEA,OAAKrH,MAAL,CAAYsH,KAAZ,CAAkB,SAAlB,EAA6B,KAAKnI,EAAlC,EAAsC2C,GAAG,CAACG,OAA1C;AAEA,OAAKsF,IAAL,CAAU,OAAV,EAAmBzF,GAAnB;AACA,OAAKiB,KAAL;AACH,CAjBD;;AAmBA/D,cAAc,CAACmC,SAAf,CAAyBuD,YAAzB,GAAwC,UAAUzC,OAAV,EAAmBmF,IAAnB,EAAyB5B,QAAzB,EAAmC6B,OAAnC,EAA4C;AAChF,MAAIvF,GAAJ;;AAEA,MAAI,YAAYoF,IAAZ,CAAiB7E,MAAM,CAAClB,SAAP,CAAiB9B,QAAjB,CAA0BH,IAA1B,CAA+B+C,OAA/B,CAAjB,CAAJ,EAA+D;AAC3DH,IAAAA,GAAG,GAAGG,OAAN;AACH,GAFD,MAEO;AACHH,IAAAA,GAAG,GAAG,IAAIE,KAAJ,CAAUC,OAAV,CAAN;AACH;;AAED,MAAImF,IAAI,IAAIA,IAAI,KAAK,OAArB,EAA8B;AAC1BtF,IAAAA,GAAG,CAAC0F,IAAJ,GAAWJ,IAAX;AACH;;AAED,MAAI5B,QAAJ,EAAc;AACV1D,IAAAA,GAAG,CAAC0D,QAAJ,GAAeA,QAAf;AACA1D,IAAAA,GAAG,CAACG,OAAJ,IAAe,OAAOuD,QAAtB;AACH;;AAED,MAAIiC,YAAY,GAAG,OAAOjC,QAAP,KAAoB,QAApB,IAAgCkC,MAAM,CAAC,CAAClC,QAAQ,CAACmC,KAAT,CAAe,MAAf,KAA0B,EAA3B,EAA+B,CAA/B,CAAD,CAAtC,IAA6E,KAAhG;;AACA,MAAIF,YAAJ,EAAkB;AACd3F,IAAAA,GAAG,CAAC2F,YAAJ,GAAmBA,YAAnB;AACH;;AAED,MAAIJ,OAAJ,EAAa;AACTvF,IAAAA,GAAG,CAACuF,OAAJ,GAAcA,OAAd;AACH;;AAED,SAAOvF,GAAP;AACH,CA5BD;AA8BA;;;;;;;AAKA9C,cAAc,CAACmC,SAAf,CAAyB+E,QAAzB,GAAoC,YAAY;AAC5C,OAAKlG,MAAL,CAAYqF,IAAZ,CAAiB,wBAAjB,EAA2C,KAAKlG,EAAhD;;AAEA,MAAI,CAAC,KAAKmH,eAAN,EAAuB,KAAKvD,KAA5B,EAAmCe,OAAnC,CAA2C,KAAKlD,gBAAL,CAAsB,CAAtB,CAA3C,IAAuE,CAAvE,IAA4E,CAAC,KAAKI,UAAtF,EAAkG;AAC9F,WAAO,KAAKe,QAAL,CAAc,IAAIC,KAAJ,CAAU,gCAAV,CAAd,EAA2D,aAA3D,EAA0E,KAA1E,EAAiF,MAAjF,CAAP;AACH;;AAED,OAAKkB,QAAL;AACH,CARD;AAUA;;;;;;;AAKAlE,cAAc,CAACmC,SAAf,CAAyBgF,MAAzB,GAAkC,YAAY;AAC1C,OAAKjD,QAAL;AACH,CAFD;AAIA;;;;;;;AAKAlE,cAAc,CAACmC,SAAf,CAAyBkF,UAAzB,GAAsC,YAAY;AAC9C,SAAO,KAAKtE,QAAL,CAAc,IAAIC,KAAJ,CAAU,SAAV,CAAd,EAAoC,WAApC,EAAiD,KAAjD,EAAwD,MAAxD,CAAP;AACH,CAFD;AAIA;;;;;AAGAhD,cAAc,CAACmC,SAAf,CAAyB+B,QAAzB,GAAoC,YAAY;AAC5C,MAAI,KAAKlC,UAAT,EAAqB;AACjB;AACH;;AACD,OAAKA,UAAL,GAAkB,IAAlB;AACA,OAAKuG,IAAL,CAAU,KAAV;AACH,CAND;AAQA;;;;;;;;AAMAvI,cAAc,CAACmC,SAAf,CAAyBU,kBAAzB,GAA8C,UAAUwB,QAAV,EAAoB;AAC9D;AACA;AAEA;AACA,OAAK9C,OAAL,CAAayF,kBAAb,CAAgC,MAAhC,EAL8D,CAKrB;;;AACzC,OAAKzF,OAAL,CAAayF,kBAAb,CAAgC,SAAhC,EAN8D,CAMlB;;;AAE5C,MAAI4B,WAAW,GAAG,KAAKrH,OAAvB;AACA,MAAIkB,IAAI,GAAG;AACPU,IAAAA,MAAM,EAAE,KAAK5B,OADN;AAEPV,IAAAA,IAAI,EAAE,KAAKA;AAFJ,GAAX;AAKAwC,EAAAA,MAAM,CAACC,IAAP,CAAY,KAAKrD,OAAL,CAAab,GAAb,IAAoB,EAAhC,EAAoCmE,OAApC,CAA4C,UAAUC,GAAV,EAAe;AACvDf,IAAAA,IAAI,CAACe,GAAD,CAAJ,GAAY,KAAKvD,OAAL,CAAab,GAAb,CAAiBoE,GAAjB,CAAZ;AACH,GAF2C,CAE1ChB,IAF0C,CAErC,IAFqC,CAA5C;AAIA,OAAKjB,OAAL,GAAenC,GAAG,CAACgD,OAAJ,CAAYK,IAAZ,EAAkB,YAAY;AACzC,SAAKhC,MAAL,GAAc,IAAd;;AACA,SAAKc,OAAL,CAAaoC,EAAb,CAAgB,MAAhB,EAAwB,KAAKsD,OAAL,CAAazE,IAAb,CAAkB,IAAlB,CAAxB;;AAEAoG,IAAAA,WAAW,CAAC5B,kBAAZ,CAA+B,OAA/B;AACA4B,IAAAA,WAAW,CAAC5B,kBAAZ,CAA+B,KAA/B;AAEA,WAAO3C,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACH,GARgC,CAQ/B7B,IAR+B,CAQ1B,IAR0B,CAAlB,CAAf;;AAUA,OAAKjB,OAAL,CAAaoC,EAAb,CAAgB,OAAhB,EAAyB,KAAKZ,QAAL,CAAcP,IAAd,CAAmB,IAAnB,CAAzB;;AACA,OAAKjB,OAAL,CAAae,IAAb,CAAkB,OAAlB,EAA2B,KAAK4E,QAAL,CAAc1E,IAAd,CAAmB,IAAnB,CAA3B;;AACA,OAAKjB,OAAL,CAAae,IAAb,CAAkB,KAAlB,EAAyB,KAAK6E,MAAL,CAAY3E,IAAZ,CAAiB,IAAjB,CAAzB;;AAEA,OAAKjB,OAAL,CAAakC,UAAb,CAAwB,KAAKxD,OAAL,CAAamH,aAAb,IAA8BxH,cAAtD,EAhC8D,CAgCS;;;AACvE,OAAK2B,OAAL,CAAaoC,EAAb,CAAgB,SAAhB,EAA2B,KAAK0D,UAAL,CAAgB7E,IAAhB,CAAqB,IAArB,CAA3B,EAjC8D,CAmC9D;;;AACAoG,EAAAA,WAAW,CAACpB,MAAZ;AACH,CArCD;AAuCA;;;;;;;AAKAxH,cAAc,CAACmC,SAAf,CAAyBgG,gBAAzB,GAA4C,YAAY;AACpD,MAAI,CAAC,KAAK7G,cAAL,CAAoBoG,MAAzB,EAAiC;AAC7B,WAAO,KAAP;AACH;;AAED,MAAIzC,GAAG,GAAG,CAAC,KAAK3D,cAAL,CAAoBuH,KAApB,MAA+B,EAAhC,EAAoCxI,QAApC,EAAV;;AAEA,MAAI,SAAS6H,IAAT,CAAcjD,GAAG,CAAC4C,KAAJ,CAAU,IAAV,EAAgBE,GAAhB,EAAd,CAAJ,EAA0C;AACtC;AACA;AACH;;AAED,MAAI,KAAK9H,OAAL,CAAasC,KAAjB,EAAwB;AACpB,SAAKvB,MAAL,CAAYuB,KAAZ,CAAkB,YAAlB,EAAgC,KAAKpC,EAArC,EAAyC8E,GAAG,CAAC3E,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAzC;AACH;;AAED,MAAI,CAAC2E,GAAG,CAACJ,IAAJ,EAAL,EAAiB;AAAE;AACfjC,IAAAA,YAAY,CAAC,KAAKuF,gBAAL,CAAsB3F,IAAtB,CAA2B,IAA3B,EAAiC,IAAjC,CAAD,CAAZ;AACH;;AAED,MAAIsG,MAAM,GAAG,KAAKlH,gBAAL,CAAsBiH,KAAtB,EAAb;;AAEA,MAAI,OAAOC,MAAP,KAAkB,UAAtB,EAAkC;AAC9BA,IAAAA,MAAM,CAAC5I,IAAP,CAAY,IAAZ,EAAkB+E,GAAlB;AACArC,IAAAA,YAAY,CAAC,KAAKuF,gBAAL,CAAsB3F,IAAtB,CAA2B,IAA3B,EAAiC,IAAjC,CAAD,CAAZ;AACH,GAHD,MAGO;AACH,WAAO,KAAKO,QAAL,CAAc,IAAIC,KAAJ,CAAU,qBAAV,CAAd,EAAgD,WAAhD,EAA6DiC,GAA7D,EAAkE,MAAlE,CAAP;AACH;AACJ,CA5BD;AA8BA;;;;;;;AAKAjF,cAAc,CAACmC,SAAf,CAAyB0B,YAAzB,GAAwC,UAAUoB,GAAV,EAAe;AACnD,MAAI,KAAKjD,UAAT,EAAqB;AACjB;AACA;AACH;;AAED,MAAI,KAAKT,OAAL,CAAaH,SAAjB,EAA4B;AACxB,WAAO,KAAK2C,KAAL,EAAP;AACH;;AAED,MAAI,KAAK9D,OAAL,CAAasC,KAAjB,EAAwB;AACpB,SAAKvB,MAAL,CAAYuB,KAAZ,CAAkB,YAAlB,EAAgC,KAAKpC,EAArC,EAAyC,CAAC8E,GAAG,IAAI,EAAR,EAAY5E,QAAZ,GAAuBC,OAAvB,CAA+B,QAA/B,EAAyC,EAAzC,CAAzC;AACH;;AAED,OAAKiB,OAAL,CAAamF,KAAb,CAAmB,IAAItB,MAAJ,CAAWH,GAAG,GAAG,MAAjB,EAAyB,OAAzB,CAAnB;AACH,CAfD;AAiBA;;;;;;;;;;;AASAjF,cAAc,CAACmC,SAAf,CAAyBiE,YAAzB,GAAwC,UAAUR,QAAV,EAAoBvB,QAApB,EAA8B;AAClE,MAAI0E,IAAI,GAAG,EAAX;AACA,MAAIC,WAAW,GAAG,KAAlB;AAEA,OAAKvH,SAAL,GAAiBmE,QAAQ,IAAI,EAA7B;AACA,OAAKnE,SAAL,CAAewH,IAAf,GAAsB,CAAC,KAAKxH,SAAL,CAAewH,IAAf,IAAuB,KAAKxH,SAAL,CAAewH,IAAf,CAAoBC,OAA3C,IAAsD,KAAKzH,SAAL,CAAewH,IAArE,IAA6E,EAA9E,EAAkF5I,QAAlF,GAA6FwE,IAA7F,EAAtB;AAEA,OAAKpD,SAAL,CAAe0H,EAAf,GAAoB,GAAGC,MAAH,CAAU,KAAK3H,SAAL,CAAe0H,EAAf,IAAqB,EAA/B,EAAmCE,GAAnC,CAAuC,UAAUF,EAAV,EAAc;AACrE,WAAO,CAACA,EAAE,IAAIA,EAAE,CAACD,OAAT,IAAoBC,EAApB,IAA0B,EAA3B,EAA+B9I,QAA/B,GAA0CwE,IAA1C,EAAP;AACH,GAFmB,CAApB;;AAIA,MAAI,CAAC,KAAKpD,SAAL,CAAe0H,EAAf,CAAkBzB,MAAvB,EAA+B;AAC3B,WAAOrD,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,uBAAlB,EAA2C,WAA3C,EAAwD,KAAxD,EAA+D,KAA/D,CAAD,CAAf;AACH;;AAED,MAAI,KAAKjE,SAAL,CAAewH,IAAf,IAAuB,WAAWf,IAAX,CAAgB,KAAKzG,SAAL,CAAewH,IAA/B,CAA3B,EAAiE;AAC7D,WAAO5E,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,oBAAoB4D,IAAI,CAACC,SAAL,CAAe,KAAK9H,SAAL,CAAewH,IAA9B,CAAtC,EAA2E,WAA3E,EAAwF,KAAxF,EAA+F,KAA/F,CAAD,CAAf;AACH,GAjBiE,CAmBlE;AACA;;;AACA,MAAI,gBAAgBf,IAAhB,CAAqB,KAAKzG,SAAL,CAAewH,IAApC,CAAJ,EAA+C;AAC3CD,IAAAA,WAAW,GAAG,IAAd;AACH;;AAED,OAAK,IAAIhB,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKxG,SAAL,CAAe0H,EAAf,CAAkBzB,MAAxC,EAAgDM,CAAC,GAAGC,GAApD,EAAyDD,CAAC,EAA1D,EAA8D;AAC1D,QAAI,CAAC,KAAKvG,SAAL,CAAe0H,EAAf,CAAkBnB,CAAlB,CAAD,IAAyB,WAAWE,IAAX,CAAgB,KAAKzG,SAAL,CAAe0H,EAAf,CAAkBnB,CAAlB,CAAhB,CAA7B,EAAoE;AAChE,aAAO3D,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,uBAAuB4D,IAAI,CAACC,SAAL,CAAe,KAAK9H,SAAL,CAAe0H,EAAf,CAAkBnB,CAAlB,CAAf,CAAzC,EAA+E,WAA/E,EAA4F,KAA5F,EAAmG,KAAnG,CAAD,CAAf;AACH,KAHyD,CAK1D;AACA;;;AACA,QAAI,gBAAgBE,IAAhB,CAAqB,KAAKzG,SAAL,CAAe0H,EAAf,CAAkBnB,CAAlB,CAArB,CAAJ,EAAgD;AAC5CgB,MAAAA,WAAW,GAAG,IAAd;AACH;AACJ,GAnCiE,CAqClE;;;AACA,OAAKvH,SAAL,CAAe+H,SAAf,GAA2BF,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACC,SAAL,CAAe,KAAK9H,SAAL,CAAe0H,EAAf,IAAqB,EAApC,CAAX,CAA3B;AACA,OAAK1H,SAAL,CAAeiI,QAAf,GAA0B,EAA1B;AACA,OAAKjI,SAAL,CAAekI,cAAf,GAAgC,EAAhC;AACA,OAAKlI,SAAL,CAAemI,QAAf,GAA0B,EAA1B;;AAEA,MAAI,KAAKnI,SAAL,CAAeoI,GAAnB,EAAwB;AACpB,QAAI;AACA,WAAKpI,SAAL,CAAeoI,GAAf,GAAqB,KAAKC,eAAL,CAAqB,KAAKrI,SAAL,CAAeoI,GAApC,CAArB;AACH,KAFD,CAEE,OAAO/G,GAAP,EAAY;AACV,aAAOuB,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,iBAAiB5C,GAAG,CAACG,OAAvC,EAAgD,WAAhD,EAA6D,KAA7D,EAAoE,KAApE,CAAD,CAAf;AACH;AACJ;;AAED,OAAKrB,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,SAAK8E,WAAL,CAAiB9E,GAAjB,EAAsBZ,QAAtB;AACH,GAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B,EAnDkE,CAuDlE;AACA;;;AACA,MAAIwG,WAAW,IAAI,KAAKtH,oBAAL,CAA0BoD,OAA1B,CAAkC,UAAlC,KAAiD,CAApE,EAAuE;AACnEiE,IAAAA,IAAI,CAACjF,IAAL,CAAU,UAAV;AACA,SAAKkG,cAAL,GAAsB,IAAtB;AACH,GA5DiE,CA8DlE;AACA;;;AACA,MAAI,KAAKvI,SAAL,CAAewI,WAAf,IAA8B,KAAKvI,oBAAL,CAA0BoD,OAA1B,CAAkC,UAAlC,KAAiD,CAAnF,EAAsF;AAClFiE,IAAAA,IAAI,CAACjF,IAAL,CAAU,eAAV;AACA,SAAKoG,cAAL,GAAsB,IAAtB;AACH;;AAED,MAAI,KAAKzI,SAAL,CAAeqE,IAAf,IAAuB,KAAKpE,oBAAL,CAA0BoD,OAA1B,CAAkC,MAAlC,KAA6C,CAAxE,EAA2E;AACvEiE,IAAAA,IAAI,CAACjF,IAAL,CAAU,UAAU,KAAKrC,SAAL,CAAeqE,IAAnC;AACH,GAvEiE,CAyElE;AACA;;;AACA,MAAI,KAAKrE,SAAL,CAAeoI,GAAf,IAAsB,KAAKnI,oBAAL,CAA0BoD,OAA1B,CAAkC,KAAlC,KAA4C,CAAtE,EAAyE;AACrE,QAAI,KAAKrD,SAAL,CAAeoI,GAAf,CAAmBM,GAAvB,EAA4B;AACxBpB,MAAAA,IAAI,CAACjF,IAAL,CAAU,SAAS,KAAKrC,SAAL,CAAeoI,GAAf,CAAmBM,GAAtC;AACH;;AACD,QAAI,KAAK1I,SAAL,CAAeoI,GAAf,CAAmBO,KAAvB,EAA8B;AAC1BrB,MAAAA,IAAI,CAACjF,IAAL,CAAU,WAAW,KAAKrC,SAAL,CAAeoI,GAAf,CAAmBO,KAAxC;AACH;AACJ;;AAED,OAAKvG,YAAL,CAAkB,gBAAiB,KAAKpC,SAAL,CAAewH,IAAhC,GAAwC,GAAxC,IAA+CF,IAAI,CAACrB,MAAL,GAAc,MAAMqB,IAAI,CAACsB,IAAL,CAAU,GAAV,CAApB,GAAqC,EAApF,CAAlB;AACH,CArFD;;AAuFArK,cAAc,CAACmC,SAAf,CAAyB2H,eAAzB,GAA2C,UAAUQ,MAAV,EAAkB;AACzD,MAAIH,GAAG,GAAGG,MAAM,CAACH,GAAP,GAAaG,MAAM,CAACH,GAAP,CAAW9J,QAAX,GAAsBuE,WAAtB,EAAb,GAAmD,IAA7D;;AACA,MAAIuF,GAAG,IAAI,CAAC,MAAD,EAAS,MAAT,EAAiBrF,OAAjB,CAAyBqF,GAAzB,IAAgC,CAA3C,EAA8C;AAC1C,UAAM,IAAInH,KAAJ,CAAU,UAAUsG,IAAI,CAACC,SAAL,CAAeY,GAAf,CAApB,CAAN;AACH;;AACD,MAAIC,KAAK,GAAGE,MAAM,CAACF,KAAP,GAAeE,MAAM,CAACF,KAAP,CAAa/J,QAAb,EAAf,GAAyC,IAArD;AACA,MAAIkK,MAAM,GAAGD,MAAM,CAACC,MAAP,GAAgBD,MAAM,CAACC,MAAvB,GAAgC,IAA7C;;AACA,MAAIA,MAAJ,EAAY;AACR,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC5BA,MAAAA,MAAM,GAAGA,MAAM,CAAC1C,KAAP,CAAa,GAAb,CAAT;AACH;;AACD0C,IAAAA,MAAM,GAAGA,MAAM,CAAClB,GAAP,CAAW,UAAUmB,CAAV,EAAa;AAC7B,aAAOA,CAAC,CAAC3F,IAAF,GAASD,WAAT,EAAP;AACH,KAFQ,CAAT;AAGA,QAAI6F,WAAW,GAAG,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB,EAAgC,OAAhC,CAAlB;AACA,QAAIC,YAAY,GAAGH,MAAM,CAACI,MAAP,CAAc,UAAUH,CAAV,EAAa;AAC1C,aAAOC,WAAW,CAAC3F,OAAZ,CAAoB0F,CAApB,MAA2B,CAAC,CAAnC;AACH,KAFkB,CAAnB;;AAGA,QAAIE,YAAY,CAAChD,MAAb,IAAwB6C,MAAM,CAAC7C,MAAP,GAAgB,CAAhB,IAAqB6C,MAAM,CAACzF,OAAP,CAAe,OAAf,KAA2B,CAA5E,EAAgF;AAC5E,YAAM,IAAI9B,KAAJ,CAAU,aAAasG,IAAI,CAACC,SAAL,CAAegB,MAAM,CAACF,IAAP,CAAY,GAAZ,CAAf,CAAvB,CAAN;AACH;;AACDE,IAAAA,MAAM,GAAGA,MAAM,CAACF,IAAP,CAAY,GAAZ,CAAT;AACH;;AACD,MAAIO,KAAK,GAAGN,MAAM,CAACM,KAAP,GAAeN,MAAM,CAACM,KAAP,CAAavK,QAAb,EAAf,GAAyC,IAArD;AACA,SAAO;AACH8J,IAAAA,GAAG,EAAEA,GADF;AAEHC,IAAAA,KAAK,EAAEA,KAFJ;AAGHG,IAAAA,MAAM,EAAEA,MAHL;AAIHK,IAAAA,KAAK,EAAEA;AAJJ,GAAP;AAMH,CA9BD;;AAgCA5K,cAAc,CAACmC,SAAf,CAAyB0I,iBAAzB,GAA6C,YAAY;AACrD,MAAI9B,IAAI,GAAG,EAAX,CADqD,CAErD;AACA;;AACA,MAAI,KAAKtH,SAAL,CAAeoI,GAAf,IAAsB,KAAKnI,oBAAL,CAA0BoD,OAA1B,CAAkC,KAAlC,KAA4C,CAAtE,EAAyE;AACrE,QAAI,KAAKrD,SAAL,CAAeoI,GAAf,CAAmBU,MAAvB,EAA+B;AAC3BxB,MAAAA,IAAI,CAACjF,IAAL,CAAU,YAAY,KAAKrC,SAAL,CAAeoI,GAAf,CAAmBU,MAAzC;AACH;;AACD,QAAI,KAAK9I,SAAL,CAAeoI,GAAf,CAAmBe,KAAvB,EAA8B;AAC1B7B,MAAAA,IAAI,CAACjF,IAAL,CAAU,WAAW,KAAKrC,SAAL,CAAeoI,GAAf,CAAmBe,KAAxC;AACH;AACJ;;AACD,SAAQ7B,IAAI,CAACrB,MAAL,GAAc,MAAMqB,IAAI,CAACsB,IAAL,CAAU,GAAV,CAApB,GAAqC,EAA7C;AACH,CAbD;;AAeArK,cAAc,CAACmC,SAAf,CAAyBoE,iBAAzB,GAA6C,UAAUlC,QAAV,EAAoB;AAC7D,MAAIyG,UAAU,GAAG,IAAIvL,UAAJ,EAAjB;AACA,MAAIwL,SAAJ;;AAEA,MAAI,KAAK9K,OAAL,CAAa+K,IAAjB,EAAuB;AACnB,SAAKvJ,SAAL,CAAemI,QAAf,CAAwBrG,OAAxB,CAAgC,UAAU0H,SAAV,EAAqBjD,CAArB,EAAwB;AACpD,UAAIkD,KAAK,GAAGlD,CAAC,KAAK,KAAKvG,SAAL,CAAemI,QAAf,CAAwBlC,MAAxB,GAAiC,CAAnD;;AACA,WAAK9F,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,aAAKkG,iBAAL,CAAuBF,SAAvB,EAAkCC,KAAlC,EAAyCjG,GAAzC,EAA8CZ,QAA9C;AACH,OAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;AAGH,KAL+B,CAK9BA,IAL8B,CAKzB,IALyB,CAAhC;AAMH,GAPD,MAOO;AACH,SAAKZ,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,WAAKmG,iBAAL,CAAuBnG,GAAvB,EAA4BZ,QAA5B;AACH,KAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;AAGH;;AAEDsI,EAAAA,UAAU,CAACrE,IAAX,CAAgB,KAAKlF,OAArB,EAA8B;AAC1BoF,IAAAA,GAAG,EAAE;AADqB,GAA9B;;AAIA,MAAI,KAAK1G,OAAL,CAAasC,KAAjB,EAAwB;AACpBwI,IAAAA,SAAS,GAAG,IAAIvL,WAAJ,EAAZ;AACAuL,IAAAA,SAAS,CAACpH,EAAV,CAAa,UAAb,EAAyB,YAAY;AACjC,UAAI8D,KAAJ;;AACA,aAAQA,KAAK,GAAGsD,SAAS,CAACM,IAAV,EAAhB,EAAmC;AAC/B,aAAKrK,MAAL,CAAYuB,KAAZ,CAAkB,YAAlB,EAAgC,KAAKpC,EAArC,EAAyCsH,KAAK,CAACpH,QAAN,CAAe,QAAf,EAAyBC,OAAzB,CAAiC,QAAjC,EAA2C,EAA3C,CAAzC;AACH;AACJ,KALwB,CAKvBkC,IALuB,CAKlB,IALkB,CAAzB;AAMAsI,IAAAA,UAAU,CAACrE,IAAX,CAAgBsE,SAAhB;AACH;;AAEDD,EAAAA,UAAU,CAACxI,IAAX,CAAgB,KAAhB,EAAuB,YAAY;AAC/B,SAAKtB,MAAL,CAAYqF,IAAZ,CAAiB,gEAAjB,EAAmF,KAAKlG,EAAxF,EAA4F2K,UAAU,CAACQ,YAAvG,EAAqHR,UAAU,CAACS,WAAhI;AACH,GAFsB,CAErB/I,IAFqB,CAEhB,IAFgB,CAAvB;AAIA,SAAOsI,UAAP;AACH,CArCD;AAuCA;;AAEA;;;;;;;;;AAOA9K,cAAc,CAACmC,SAAf,CAAyBmF,eAAzB,GAA2C,UAAUrC,GAAV,EAAe;AACtDjB,EAAAA,YAAY,CAAC,KAAKlC,gBAAN,CAAZ;;AAEA,MAAImD,GAAG,CAACuG,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,KAAzB,EAAgC;AAC5B,SAAKzI,QAAL,CAAc,IAAIC,KAAJ,CAAU,oCAAoCiC,GAA9C,CAAd,EAAkE,WAAlE,EAA+EA,GAA/E,EAAoF,MAApF;;AACA;AACH;;AAED,MAAI,KAAKhF,OAAL,CAAa+K,IAAjB,EAAuB;AACnB,SAAKpJ,gBAAL,CAAsBkC,IAAtB,CAA2B,KAAK2H,WAAhC;;AACA,SAAK5H,YAAL,CAAkB,UAAU,KAAK/C,IAAjC;AACH,GAHD,MAGO;AACH,SAAKc,gBAAL,CAAsBkC,IAAtB,CAA2B,KAAK4H,WAAhC;;AACA,SAAK7H,YAAL,CAAkB,UAAU,KAAK/C,IAAjC;AACH;AACJ,CAfD;AAiBA;;;;;;;;AAMAd,cAAc,CAACmC,SAAf,CAAyBsJ,WAAzB,GAAuC,UAAUxG,GAAV,EAAe;AAClD,MAAIA,GAAG,CAAC4B,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvB,SAAK9D,QAAL,CAAc,IAAIC,KAAJ,CAAU,iCAAiCiC,GAA3C,CAAd,EAA+D,WAA/D,EAA4EA,GAA5E,EAAiF,MAAjF;;AACA;AACH;;AAED,OAAKyG,WAAL,CAAiBzG,GAAjB;AACH,CAPD;AASA;;;;;;;;;;AAQAjF,cAAc,CAACmC,SAAf,CAAyBuJ,WAAzB,GAAuC,UAAUzG,GAAV,EAAe;AAClD,MAAI0D,KAAJ;;AAEA,MAAI1D,GAAG,CAACuG,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,KAAzB,EAAgC;AAC5B,SAAKzI,QAAL,CAAc,IAAIC,KAAJ,CAAU,oCAAoCiC,GAA9C,CAAd,EAAkE,aAAlE,EAAiFA,GAAjF,EAAsF,MAAtF;;AACA;AACH;;AAED,MAAIA,GAAG,CAAC4B,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvB,QAAI,KAAK5G,OAAL,CAAa0L,UAAjB,EAA6B;AACzB,WAAK5I,QAAL,CAAc,IAAIC,KAAJ,CAAU,+DAA+DiC,GAAzE,CAAd,EAA6F,aAA7F,EAA4GA,GAA5G,EAAiH,MAAjH;;AACA;AACH,KAJsB,CAMvB;;;AACA,SAAKrD,gBAAL,CAAsBkC,IAAtB,CAA2B,KAAK8H,WAAhC;;AACA,SAAK/H,YAAL,CAAkB,UAAU,KAAK/C,IAAjC;;AACA;AACH,GAlBiD,CAoBlD;;;AACA,MAAI,CAAC,KAAKL,MAAN,IAAgB,CAAC,KAAKR,OAAL,CAAa4L,SAA9B,KAA4C,oBAAoB3D,IAApB,CAAyBjD,GAAzB,KAAiC,KAAKhF,OAAL,CAAa0L,UAA1F,CAAJ,EAA2G;AACvG,SAAK9H,YAAL,CAAkB,UAAlB;;AACA,SAAKjC,gBAAL,CAAsBkC,IAAtB,CAA2B,KAAKgI,eAAhC;;AACA;AACH,GAzBiD,CA2BlD;;;AACA,MAAI,oBAAoB5D,IAApB,CAAyBjD,GAAzB,CAAJ,EAAmC;AAC/B,SAAKvD,oBAAL,CAA0BoC,IAA1B,CAA+B,UAA/B;AACH,GA9BiD,CAgClD;;;AACA,MAAI,eAAeoE,IAAf,CAAoBjD,GAApB,CAAJ,EAA8B;AAC1B,SAAKvD,oBAAL,CAA0BoC,IAA1B,CAA+B,KAA/B;AACH,GAnCiD,CAqClD;;;AACA,MAAI,oBAAoBoE,IAApB,CAAyBjD,GAAzB,CAAJ,EAAmC;AAC/B,SAAKvD,oBAAL,CAA0BoC,IAA1B,CAA+B,UAA/B;AACH,GAxCiD,CA0ClD;;;AACA,MAAI,sBAAsBoE,IAAtB,CAA2BjD,GAA3B,CAAJ,EAAqC;AACjC,SAAKvD,oBAAL,CAA0BoC,IAA1B,CAA+B,YAA/B;AACH,GA7CiD,CA+ClD;;;AACA,MAAI,uCAAuCoE,IAAvC,CAA4CjD,GAA5C,CAAJ,EAAsD;AAClD,SAAKzD,cAAL,CAAoBsC,IAApB,CAAyB,OAAzB;AACH,GAlDiD,CAoDlD;;;AACA,MAAI,uCAAuCoE,IAAvC,CAA4CjD,GAA5C,CAAJ,EAAsD;AAClD,SAAKzD,cAAL,CAAoBsC,IAApB,CAAyB,OAAzB;AACH,GAvDiD,CAyDlD;;;AACA,MAAI,0CAA0CoE,IAA1C,CAA+CjD,GAA/C,CAAJ,EAAyD;AACrD,SAAKzD,cAAL,CAAoBsC,IAApB,CAAyB,UAAzB;AACH,GA5DiD,CA8DlD;;;AACA,MAAI,yCAAyCoE,IAAzC,CAA8CjD,GAA9C,CAAJ,EAAwD;AACpD,SAAKzD,cAAL,CAAoBsC,IAApB,CAAyB,SAAzB;AACH,GAjEiD,CAmElD;;;AACA,MAAK6E,KAAK,GAAG1D,GAAG,CAAC0D,KAAJ,CAAU,0BAAV,CAAb,EAAqD;AACjD,SAAKjH,oBAAL,CAA0BoC,IAA1B,CAA+B,MAA/B;;AACA,SAAKnC,eAAL,GAAuB+G,MAAM,CAACC,KAAK,CAAC,CAAD,CAAN,CAAN,IAAoB,CAA3C;AACH;;AAED,OAAKJ,IAAL,CAAU,SAAV;AACH,CA1ED;AA4EA;;;;;;;;AAMAvI,cAAc,CAACmC,SAAf,CAAyByJ,WAAzB,GAAuC,UAAU3G,GAAV,EAAe;AAClD,MAAIA,GAAG,CAAC4B,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvB,SAAK9D,QAAL,CAAc,IAAIC,KAAJ,CAAU,sCAAsCiC,GAAhD,CAAd,EAAoE,WAApE,EAAiFA,GAAjF,EAAsF,MAAtF;;AACA;AACH;;AAED,OAAKsD,IAAL,CAAU,SAAV;AACH,CAPD;AASA;;;;;;;;;AAOAvI,cAAc,CAACmC,SAAf,CAAyB2J,eAAzB,GAA2C,UAAU7G,GAAV,EAAe;AACtD,MAAIA,GAAG,CAAC4B,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvB,QAAI,KAAK5G,OAAL,CAAa8L,gBAAjB,EAAmC;AAC/B,WAAK/K,MAAL,CAAYqF,IAAZ,CAAiB,sDAAjB,EAAyE,KAAKlG,EAA9E;AACA,aAAO,KAAKoI,IAAL,CAAU,SAAV,CAAP;AACH;;AACD,SAAKxF,QAAL,CAAc,IAAIC,KAAJ,CAAU,0CAAV,CAAd,EAAqE,MAArE,EAA6EiC,GAA7E,EAAkF,UAAlF;;AACA;AACH;;AAED,OAAKpC,kBAAL,CAAwB,UAAUC,GAAV,EAAenC,OAAf,EAAwB;AAC5C,QAAImC,GAAJ,EAAS;AACL,WAAKC,QAAL,CAAc,IAAIC,KAAJ,CAAU,6BAA6BF,GAAG,CAACG,OAAJ,IAAeH,GAA5C,CAAV,CAAd,EAA2E,MAA3E,EAAmF,KAAnF,EAA0F,UAA1F;;AACA;AACH;;AAED,SAAK9B,MAAL,CAAYqF,IAAZ,CAAiB,wCAAjB,EAA2D,KAAKlG,EAAhE;;AAEA,QAAIQ,OAAJ,EAAa;AACT;AACA,WAAKiB,gBAAL,CAAsBkC,IAAtB,CAA2B,KAAK4H,WAAhC;;AACA,WAAK7H,YAAL,CAAkB,UAAU,KAAK/C,IAAjC;AACH,KAJD,MAIO;AACH,WAAKyH,IAAL,CAAU,SAAV;AACH;AACJ,GAfuB,CAetB/F,IAfsB,CAejB,IAfiB,CAAxB;AAgBH,CA1BD;AA4BA;;;;;;;;;AAOAxC,cAAc,CAACmC,SAAf,CAAyB+C,sBAAzB,GAAkD,UAAUD,GAAV,EAAeZ,QAAf,EAAyB;AACvE,MAAIY,GAAG,KAAK,kBAAZ,EAAgC;AAC5BZ,IAAAA,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,6DAAlB,EAAiF,OAAjF,EAA0FT,GAA1F,EAA+F,YAA/F,CAAD,CAAR;AACA;AACH;;AAED,OAAKrD,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,SAAK+G,sBAAL,CAA4B/G,GAA5B,EAAiCZ,QAAjC;AACH,GAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAIA,OAAKqB,YAAL,CAAkB,IAAIuB,MAAJ,CAAW,KAAKd,KAAL,CAAWG,IAAX,GAAkB,EAA7B,EAAiC,OAAjC,EAA0CpE,QAA1C,CAAmD,QAAnD,CAAlB;AACH,CAXD;AAaA;;;;;;;;;;AAQAL,cAAc,CAACmC,SAAf,CAAyBoD,sBAAzB,GAAkD,UAAUN,GAAV,EAAeZ,QAAf,EAAyB;AACvE,MAAI4H,cAAc,GAAGhH,GAAG,CAAC0D,KAAJ,CAAU,cAAV,CAArB;AACA,MAAIuD,eAAe,GAAG,EAAtB;;AAEA,MAAI,CAACD,cAAL,EAAqB;AACjB,WAAO5H,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,kEAAlB,EAAsF,OAAtF,EAA+FT,GAA/F,EAAoG,WAApG,CAAD,CAAf;AACH,GAFD,MAEO;AACHiH,IAAAA,eAAe,GAAGD,cAAc,CAAC,CAAD,CAAhC;AACH;;AAED,MAAI,CAAC,SAAS/D,IAAT,CAAcgE,eAAd,CAAL,EAAqC;AACjCA,IAAAA,eAAe,GAAG,UAAUA,eAA5B;AACH;;AAED,MAAIC,YAAY,GAAGzM,IAAI,CAAC0M,iBAAL,CAAuBF,eAAvB,EAAwC7H,QAAxC,CAAnB;;AACA,MAAI,CAAC8H,YAAL,EAAmB;AACf;AACH;;AAED,MAAIE,YAAY,GAAG3M,IAAI,CAAC4M,kBAAL,CAAwBH,YAAxB,EAAsC;AACrDpH,IAAAA,MAAM,EAAE,KAAKT,KAAL,CAAWS,MAAX,IAAqB,EADwB;AAErDU,IAAAA,WAAW,EAAE,KAAKnB,KAAL,CAAWmB,WAAX,IAA0B,EAFc;AAGrD8G,IAAAA,QAAQ,EAAE,KAAKjI,KAAL,CAAWG,IAHgC;AAIrD+H,IAAAA,QAAQ,EAAE,KAAKlI,KAAL,CAAWe;AAJgC,GAAtC,CAAnB;AAOAgH,EAAAA,YAAY,GAAGA,YAAY,CAACI,SAAb,CAAuB,CAAvB,CAAf,CA1BuE,CA0B7B;;AAE1C,OAAK7K,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,SAAKyH,sBAAL,CAA4BzH,GAA5B,EAAiCZ,QAAjC;AACH,GAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAIA,OAAKqB,YAAL,CAAkBwI,YAAlB;AACH,CAjCD;AAmCA;;;;;;;;;;;AASArM,cAAc,CAACmC,SAAf,CAAyBmD,oBAAzB,GAAgD,UAAUL,GAAV,EAAeZ,QAAf,EAAyB;AACrE,MAAI4H,cAAc,GAAGhH,GAAG,CAAC0D,KAAJ,CAAU,cAAV,CAArB;AACA,MAAIuD,eAAe,GAAG,EAAtB;;AAEA,MAAI,CAACD,cAAL,EAAqB;AACjB,WAAO5H,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,kEAAlB,EAAsF,OAAtF,EAA+FT,GAA/F,EAAoG,eAApG,CAAD,CAAf;AACH,GAFD,MAEO;AACHiH,IAAAA,eAAe,GAAGD,cAAc,CAAC,CAAD,CAAhC;AACH,GARoE,CAUrE;;;AACA,MAAIU,aAAa,GAAG,IAAIvH,MAAJ,CAAW8G,eAAX,EAA4B,QAA5B,EAAsC7L,QAAtC,CAA+C,OAA/C,CAApB;AAAA,MACIuM,QAAQ,GAAGtN,MAAM,CAACuN,UAAP,CAAkB,KAAlB,EAAyB,KAAKvI,KAAL,CAAWe,IAApC,CADf;AAGAuH,EAAAA,QAAQ,CAACE,MAAT,CAAgBH,aAAhB;AAEA,MAAII,QAAQ,GAAGH,QAAQ,CAACI,MAAT,CAAgB,KAAhB,CAAf;AAAA,MACIC,SAAS,GAAG,KAAK3I,KAAL,CAAWG,IAAX,GAAkB,GAAlB,GAAwBsI,QADxC;;AAGA,OAAKnL,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,SAAKiI,yBAAL,CAA+BjI,GAA/B,EAAoCZ,QAApC;AACH,GAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAKA,OAAKqB,YAAL,CAAkB,IAAIuB,MAAJ,CAAW6H,SAAX,EAAsB5M,QAAtB,CAA+B,QAA/B,CAAlB;AACH,CAzBD;AA2BA;;;;;;;;AAMAL,cAAc,CAACmC,SAAf,CAAyB+K,yBAAzB,GAAqD,UAAUjI,GAAV,EAAeZ,QAAf,EAAyB;AAC1E,MAAI,CAACY,GAAG,CAAC0D,KAAJ,CAAU,SAAV,CAAL,EAA2B;AACvB,WAAOtE,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,gDAAlB,EAAoE,OAApE,EAA6ET,GAA7E,EAAkF,eAAlF,CAAD,CAAf;AACH;;AAED,OAAKjE,MAAL,CAAYqF,IAAZ,CAAiB,4BAAjB,EAA+C,KAAKlG,EAApD,EAAwDmJ,IAAI,CAACC,SAAL,CAAe,KAAKhF,KAApB,CAAxD;AACA,OAAKpD,aAAL,GAAqB,IAArB;AACAkD,EAAAA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACH,CARD;AAUA;;;;;;;;AAMArE,cAAc,CAACmC,SAAf,CAAyBuK,sBAAzB,GAAkD,UAAUzH,GAAV,EAAeZ,QAAf,EAAyB;AACvE,MAAI,CAACY,GAAG,CAAC0D,KAAJ,CAAU,SAAV,CAAL,EAA2B;AACvB,WAAOtE,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,gDAAlB,EAAoE,OAApE,EAA6ET,GAA7E,EAAkF,WAAlF,CAAD,CAAf;AACH;;AAED,OAAKjE,MAAL,CAAYqF,IAAZ,CAAiB,4BAAjB,EAA+C,KAAKlG,EAApD,EAAwDmJ,IAAI,CAACC,SAAL,CAAe,KAAKhF,KAApB,CAAxD;AACA,OAAKpD,aAAL,GAAqB,IAArB;AACAkD,EAAAA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACH,CARD;AAUA;;;;;;;;;AAOArE,cAAc,CAACmC,SAAf,CAAyB6J,sBAAzB,GAAkD,UAAU/G,GAAV,EAAeZ,QAAf,EAAyB;AACvE,MAAIY,GAAG,KAAK,kBAAZ,EAAgC;AAC5B,WAAOZ,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,6DAAlB,EAAiF,OAAjF,EAA0FT,GAA1F,EAA+F,YAA/F,CAAD,CAAf;AACH;;AAED,OAAKrD,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,SAAKE,mBAAL,CAAyBF,GAAzB,EAA8BZ,QAA9B;AACH,GAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAIA,OAAKqB,YAAL,CAAkB,IAAIuB,MAAJ,CAAW,KAAKd,KAAL,CAAWe,IAAX,GAAkB,EAA7B,EAAiC,OAAjC,EAA0ChF,QAA1C,CAAmD,QAAnD,CAAlB;AACH,CAVD;AAYA;;;;;;;;AAMAL,cAAc,CAACmC,SAAf,CAAyBgD,mBAAzB,GAA+C,UAAUF,GAAV,EAAekI,OAAf,EAAwB9I,QAAxB,EAAkC;AAC7E,MAAI,CAACA,QAAD,IAAa,OAAO8I,OAAP,KAAmB,UAApC,EAAgD;AAC5C9I,IAAAA,QAAQ,GAAG8I,OAAX;AACAA,IAAAA,OAAO,GAAGC,SAAV;AACH;;AAED,MAAInI,GAAG,CAACuG,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,KAAzB,EAAgC;AAC5B,SAAK5J,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,UAAIkI,OAAO,IAAI,CAAC,KAAK7I,KAAL,CAAWE,OAAvB,IAAkC,OAAO,KAAKF,KAAL,CAAWE,OAAlB,KAA8B,QAApE,EAA8E;AAC1E,aAAKW,mBAAL,CAAyBF,GAAzB,EAA8B,IAA9B,EAAoCZ,QAApC;AACH,OAFD,MAEO;AACHZ,QAAAA,UAAU,CAAC,KAAKuB,mBAAL,CAAyBxC,IAAzB,CAA8B,IAA9B,EAAoC,IAApC,EAA0C6B,QAA1C,CAAD,EAAsDgJ,IAAI,CAACC,MAAL,KAAgB,IAAhB,GAAuB,IAA7E,CAAV;AACH;AACJ,KAN0B,CAMzB9K,IANyB,CAMpB,IANoB,CAA3B;;AAOA,SAAKqB,YAAL,CAAkB,EAAlB;;AACA;AACH;;AAED,MAAIoB,GAAG,CAAC4B,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvB,SAAK7F,MAAL,CAAYqF,IAAZ,CAAiB,qCAAjB,EAAwD,KAAKlG,EAA7D,EAAiEmJ,IAAI,CAACC,SAAL,CAAe,KAAKhF,KAApB,CAAjE;AACA,WAAOF,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,eAAlB,EAAmC,OAAnC,EAA4CT,GAA5C,EAAiD,UAAU,KAAKP,WAAhE,CAAD,CAAf;AACH;;AAED,OAAK1D,MAAL,CAAYqF,IAAZ,CAAiB,4BAAjB,EAA+C,KAAKlG,EAApD,EAAwDmJ,IAAI,CAACC,SAAL,CAAe,KAAKhF,KAApB,CAAxD;AACA,OAAKpD,aAAL,GAAqB,IAArB;AACAkD,EAAAA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACH,CA1BD;AA4BA;;;;;;;AAKArE,cAAc,CAACmC,SAAf,CAAyB4H,WAAzB,GAAuC,UAAU9E,GAAV,EAAeZ,QAAf,EAAyB;AAC5D,MAAIpB,OAAJ,EAAasK,YAAb;;AACA,MAAI7E,MAAM,CAACzD,GAAG,CAAC4B,MAAJ,CAAW,CAAX,CAAD,CAAN,KAA0B,CAA9B,EAAiC;AAC7B,QAAI,KAAKmD,cAAL,IAAuB,QAAQ9B,IAAR,CAAajD,GAAb,CAAvB,IAA4C,gBAAgBiD,IAAhB,CAAqB,KAAKzG,SAAL,CAAewH,IAApC,CAAhD,EAA2F;AACvFhG,MAAAA,OAAO,GAAG,4CAAV;AACH,KAFD,MAEO;AACHA,MAAAA,OAAO,GAAG,qBAAV;AACH;;AACD,WAAOoB,QAAQ,CAAC,KAAKqB,YAAL,CAAkBzC,OAAlB,EAA2B,WAA3B,EAAwCgC,GAAxC,EAA6C,WAA7C,CAAD,CAAf;AACH;;AAED,MAAI,CAAC,KAAKxD,SAAL,CAAe+H,SAAf,CAAyB9B,MAA9B,EAAsC;AAClC,WAAOrD,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,0CAAlB,EAA8D,WAA9D,EAA2E,KAA3E,EAAkF,KAAlF,CAAD,CAAf;AACH,GAFD,MAEO;AACH,SAAK7D,eAAL,GAAuB,EAAvB;;AAEA,QAAI,KAAKH,oBAAL,CAA0BoD,OAA1B,CAAkC,YAAlC,KAAmD,CAAvD,EAA0D;AACtD,aAAO,KAAKrD,SAAL,CAAe+H,SAAf,CAAyB9B,MAAhC,EAAwC;AACpC6F,QAAAA,YAAY,GAAG,KAAK9L,SAAL,CAAe+H,SAAf,CAAyBX,KAAzB,EAAf;;AACA,aAAKhH,eAAL,CAAqBiC,IAArB,CAA0ByJ,YAA1B;;AACA,aAAK3L,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,eAAKuI,WAAL,CAAiBvI,GAAjB,EAAsBZ,QAAtB;AACH,SAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,aAAKqB,YAAL,CAAkB,cAAc0J,YAAd,GAA6B,GAA7B,GAAmC,KAAK1C,iBAAL,EAArD;AACH;AACJ,KATD,MASO;AACH0C,MAAAA,YAAY,GAAG,KAAK9L,SAAL,CAAe+H,SAAf,CAAyBX,KAAzB,EAAf;;AACA,WAAKhH,eAAL,CAAqBiC,IAArB,CAA0ByJ,YAA1B;;AACA,WAAK3L,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,aAAKuI,WAAL,CAAiBvI,GAAjB,EAAsBZ,QAAtB;AACH,OAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,WAAKqB,YAAL,CAAkB,cAAc0J,YAAd,GAA6B,GAA7B,GAAmC,KAAK1C,iBAAL,EAArD;AACH;AACJ;AACJ,CAlCD;AAoCA;;;;;;;AAKA7K,cAAc,CAACmC,SAAf,CAAyBqL,WAAzB,GAAuC,UAAUvI,GAAV,EAAeZ,QAAf,EAAyB;AAC5D,MAAIpB,OAAJ;AAAA,MAAaH,GAAb;AAAA,MAAkByK,YAAY,GAAG,KAAK1L,eAAL,CAAqBgH,KAArB,EAAjC;;AACA,MAAIH,MAAM,CAACzD,GAAG,CAAC4B,MAAJ,CAAW,CAAX,CAAD,CAAN,KAA0B,CAA9B,EAAiC;AAC7B;AACA,QAAI,KAAKmD,cAAL,IAAuB,QAAQ9B,IAAR,CAAajD,GAAb,CAAvB,IAA4C,gBAAgBiD,IAAhB,CAAqBqF,YAArB,CAAhD,EAAoF;AAChFtK,MAAAA,OAAO,GAAG,4CAAV;AACH,KAFD,MAEO;AACHA,MAAAA,OAAO,GAAG,0BAAV;AACH;;AACD,SAAKxB,SAAL,CAAeiI,QAAf,CAAwB5F,IAAxB,CAA6ByJ,YAA7B,EAP6B,CAQ7B;;;AACAzK,IAAAA,GAAG,GAAG,KAAK4C,YAAL,CAAkBzC,OAAlB,EAA2B,WAA3B,EAAwCgC,GAAxC,EAA6C,SAA7C,CAAN;AACAnC,IAAAA,GAAG,CAACmI,SAAJ,GAAgBsC,YAAhB;;AACA,SAAK9L,SAAL,CAAekI,cAAf,CAA8B7F,IAA9B,CAAmChB,GAAnC;AACH,GAZD,MAYO;AACH,SAAKrB,SAAL,CAAemI,QAAf,CAAwB9F,IAAxB,CAA6ByJ,YAA7B;AACH;;AAED,MAAI,CAAC,KAAK9L,SAAL,CAAe+H,SAAf,CAAyB9B,MAA1B,IAAoC,CAAC,KAAK7F,eAAL,CAAqB6F,MAA9D,EAAsE;AAClE,QAAI,KAAKjG,SAAL,CAAeiI,QAAf,CAAwBhC,MAAxB,GAAiC,KAAKjG,SAAL,CAAe0H,EAAf,CAAkBzB,MAAvD,EAA+D;AAC3D,WAAK9F,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,aAAKwI,WAAL,CAAiBxI,GAAjB,EAAsBZ,QAAtB;AACH,OAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,WAAKqB,YAAL,CAAkB,MAAlB;AACH,KALD,MAKO;AACHf,MAAAA,GAAG,GAAG,KAAK4C,YAAL,CAAkB,iDAAlB,EAAqE,WAArE,EAAkFT,GAAlF,EAAuF,SAAvF,CAAN;AACAnC,MAAAA,GAAG,CAAC4G,QAAJ,GAAe,KAAKjI,SAAL,CAAeiI,QAA9B;AACA5G,MAAAA,GAAG,CAAC6G,cAAJ,GAAqB,KAAKlI,SAAL,CAAekI,cAApC;AACA,aAAOtF,QAAQ,CAACvB,GAAD,CAAf;AACH;AACJ,GAZD,MAYO,IAAI,KAAKrB,SAAL,CAAe+H,SAAf,CAAyB9B,MAA7B,EAAqC;AACxC6F,IAAAA,YAAY,GAAG,KAAK9L,SAAL,CAAe+H,SAAf,CAAyBX,KAAzB,EAAf;;AACA,SAAKhH,eAAL,CAAqBiC,IAArB,CAA0ByJ,YAA1B;;AACA,SAAK3L,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,WAAKuI,WAAL,CAAiBvI,GAAjB,EAAsBZ,QAAtB;AACH,KAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAGA,SAAKqB,YAAL,CAAkB,cAAc0J,YAAd,GAA6B,GAA7B,GAAmC,KAAK1C,iBAAL,EAArD;AACH;AACJ,CAtCD;AAwCA;;;;;;;AAKA7K,cAAc,CAACmC,SAAf,CAAyBsL,WAAzB,GAAuC,UAAUxI,GAAV,EAAeZ,QAAf,EAAyB;AAC5D;AACA;AACA,MAAI,CAAC,CAAD,EAAI,CAAJ,EAAOS,OAAP,CAAe4D,MAAM,CAACzD,GAAG,CAAC4B,MAAJ,CAAW,CAAX,CAAD,CAArB,IAAwC,CAA5C,EAA+C;AAC3C,WAAOxC,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,qBAAlB,EAAyC,WAAzC,EAAsDT,GAAtD,EAA2D,MAA3D,CAAD,CAAf;AACH;;AAED,MAAIuB,QAAQ,GAAG;AACXoD,IAAAA,QAAQ,EAAE,KAAKnI,SAAL,CAAemI,QADd;AAEXF,IAAAA,QAAQ,EAAE,KAAKjI,SAAL,CAAeiI;AAFd,GAAf;;AAKA,MAAI,KAAKjI,SAAL,CAAekI,cAAf,CAA8BjC,MAAlC,EAA0C;AACtClB,IAAAA,QAAQ,CAACmD,cAAT,GAA0B,KAAKlI,SAAL,CAAekI,cAAzC;AACH;;AAEDtF,EAAAA,QAAQ,CAAC,IAAD,EAAOmC,QAAP,CAAR;AACH,CAjBD;AAmBA;;;;;;;;AAMAxG,cAAc,CAACmC,SAAf,CAAyBiJ,iBAAzB,GAA6C,UAAUnG,GAAV,EAAeZ,QAAf,EAAyB;AAClE,MAAIqE,MAAM,CAACzD,GAAG,CAAC4B,MAAJ,CAAW,CAAX,CAAD,CAAN,KAA0B,CAA9B,EAAiC;AAC7B;AACA,WAAOxC,QAAQ,CAAC,KAAKqB,YAAL,CAAkB,gBAAlB,EAAoC,UAApC,EAAgDT,GAAhD,EAAqD,MAArD,CAAD,CAAf;AACH,GAHD,MAGO;AACH;AACA,WAAOZ,QAAQ,CAAC,IAAD,EAAOY,GAAP,CAAf;AACH;AACJ,CARD;AAUA;;;;;;;;;;;AASAjF,cAAc,CAACmC,SAAf,CAAyBgJ,iBAAzB,GAA6C,UAAUF,SAAV,EAAqBC,KAArB,EAA4BjG,GAA5B,EAAiCZ,QAAjC,EAA2C;AACpF,MAAIvB,GAAJ;;AACA,MAAI4F,MAAM,CAACzD,GAAG,CAAC4B,MAAJ,CAAW,CAAX,CAAD,CAAN,KAA0B,CAA9B,EAAiC;AAC7B;AACA/D,IAAAA,GAAG,GAAG,KAAK4C,YAAL,CAAkB,kCAAkCuF,SAApD,EAA+D,UAA/D,EAA2EhG,GAA3E,EAAgF,MAAhF,CAAN;AACAnC,IAAAA,GAAG,CAACmI,SAAJ,GAAgBA,SAAhB;;AACA,SAAKxJ,SAAL,CAAeiI,QAAf,CAAwB5F,IAAxB,CAA6BmH,SAA7B;;AACA,SAAKxJ,SAAL,CAAekI,cAAf,CAA8B7F,IAA9B,CAAmChB,GAAnC;;AACA,SAAK,IAAIkF,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKxG,SAAL,CAAemI,QAAf,CAAwBlC,MAA9C,EAAsDM,CAAC,GAAGC,GAA1D,EAA+DD,CAAC,EAAhE,EAAoE;AAChE,UAAI,KAAKvG,SAAL,CAAemI,QAAf,CAAwB5B,CAAxB,MAA+BiD,SAAnC,EAA8C;AAC1C,aAAKxJ,SAAL,CAAemI,QAAf,CAAwB8D,MAAxB,CAA+B1F,CAA/B,EAAkC,CAAlC;AACH;AACJ;AACJ;;AACD,MAAIkD,KAAJ,EAAW;AACP,WAAO7G,QAAQ,CAAC,IAAD,EAAOY,GAAP,CAAf;AACH;AACJ,CAjBD;;AAmBAjF,cAAc,CAACmC,SAAf,CAAyB6C,mBAAzB,GAA+C,UAAUmI,OAAV,EAAmB9I,QAAnB,EAA6B;AACxE,OAAKzC,gBAAL,CAAsBkC,IAAtB,CAA2B,UAAUmB,GAAV,EAAe;AACtC,SAAKE,mBAAL,CAAyBF,GAAzB,EAA8BkI,OAA9B,EAAuC9I,QAAvC;AACH,GAF0B,CAEzB7B,IAFyB,CAEpB,IAFoB,CAA3B;;AAIA,MAAI,KAAK8B,KAAL,CAAWE,OAAX,IAAsB,OAAO,KAAKF,KAAL,CAAWE,OAAlB,KAA8B,QAAxD,EAAkE;AAC9D,SAAKF,KAAL,CAAWE,OAAX,CAAmB2I,OAAO,GAAG,eAAH,GAAqB,UAA/C,EAA2D,UAAUrK,GAAV,EAAe6K,KAAf,EAAsB;AAC7E,UAAI7K,GAAJ,EAAS;AACL,aAAK9B,MAAL,CAAYqF,IAAZ,CAAiB,qCAAjB,EAAwD,KAAKlG,EAA7D,EAAiEmJ,IAAI,CAACC,SAAL,CAAe,KAAKhF,KAApB,CAAjE;AACA,eAAOF,QAAQ,CAAC,KAAKqB,YAAL,CAAkB5C,GAAlB,EAAuB,OAAvB,EAAgC,KAAhC,EAAuC,cAAvC,CAAD,CAAf;AACH;;AACD,WAAKe,YAAL,CAAkB,kBAAkB8J,KAApC;AACH,KAN0D,CAMzDnL,IANyD,CAMpD,IANoD,CAA3D;AAOH,GARD,MAQO;AACH,SAAKqB,YAAL,CAAkB,kBAAkB,KAAK+J,kBAAL,CAAwB,KAAKtJ,KAAL,CAAWG,IAAnC,EAAyC,KAAKH,KAAL,CAAWE,OAApD,CAApC;AACH;AACJ,CAhBD;AAkBA;;;;;;;;;AAOAxE,cAAc,CAACmC,SAAf,CAAyByL,kBAAzB,GAA8C,UAAUnJ,IAAV,EAAgBkJ,KAAhB,EAAuB;AACjE,MAAIvJ,QAAQ,GAAG,CACX,WAAWK,IAAI,IAAI,EAAnB,CADW,EAEX,iBAAiBkJ,KAFN,EAGX,EAHW,EAIX,EAJW,CAAf;AAMA,SAAO,IAAIvI,MAAJ,CAAWhB,QAAQ,CAACiG,IAAT,CAAc,MAAd,CAAX,EAAkChK,QAAlC,CAA2C,QAA3C,CAAP;AACH,CARD;;AAUAL,cAAc,CAACmC,SAAf,CAAyBpB,YAAzB,GAAwC,YAAY;AAChD;AACA,MAAI8M,eAAe,GAAGxO,EAAE,CAACyO,QAAH,MAAiB,EAAvC,CAFgD,CAIhD;;AACA,MAAID,eAAe,CAAC/I,OAAhB,CAAwB,GAAxB,IAA+B,CAAnC,EAAsC;AAClC+I,IAAAA,eAAe,GAAG,aAAlB;AACH,GAP+C,CAShD;;;AACA,MAAIA,eAAe,CAAClF,KAAhB,CAAsB,sCAAtB,CAAJ,EAAmE;AAC/DkF,IAAAA,eAAe,GAAG,MAAMA,eAAN,GAAwB,GAA1C;AACH;;AAED,SAAOA,eAAP;AACH,CAfD","sourcesContent":["'use strict';\n\nvar packageInfo = require('../package.json');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar net = require('net');\nvar tls = require('tls');\nvar os = require('os');\nvar crypto = require('crypto');\nvar DataStream = require('./data-stream');\nvar PassThrough = require('stream').PassThrough;\nvar shared = require('nodemailer-shared');\nvar ntlm = require('httpntlm/ntlm');\n\n// default timeout values in ms\nvar CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nvar SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nvar GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\n\nmodule.exports = SMTPConnection;\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 25 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\nfunction SMTPConnection(options) {\n    EventEmitter.call(this);\n\n    this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n    this.stage = 'init';\n\n    this.options = options || {};\n\n    this.secureConnection = !!this.options.secure;\n    this.alreadySecured = !!this.options.secured;\n\n    this.port = this.options.port || (this.secureConnection ? 465 : 25);\n    this.host = this.options.host || 'localhost';\n\n    if (typeof this.options.secure === 'undefined' && this.port === 465) {\n        // if secure option is not set but port is 465, then default to secure\n        this.secureConnection = true;\n    }\n\n    this.name = this.options.name || this._getHostname();\n\n    this.logger = shared.getLogger(this.options);\n\n    /**\n     * Expose version nr, just for the reference\n     * @type {String}\n     */\n    this.version = packageInfo.version;\n\n    /**\n     * If true, then the user is authenticated\n     * @type {Boolean}\n     */\n    this.authenticated = false;\n\n    /**\n     * If set to true, this instance is no longer active\n     * @private\n     */\n    this.destroyed = false;\n\n    /**\n     * Defines if the current connection is secure or not. If not,\n     * STARTTLS can be used if available\n     * @private\n     */\n    this.secure = !!this.secureConnection;\n\n    /**\n     * Store incomplete messages coming from the server\n     * @private\n     */\n    this._remainder = '';\n\n    /**\n     * Unprocessed responses from the server\n     * @type {Array}\n     */\n    this._responseQueue = [];\n\n    /**\n     * The socket connecting to the server\n     * @publick\n     */\n    this._socket = false;\n\n    /**\n     * Lists supported auth mechanisms\n     * @private\n     */\n    this._supportedAuth = [];\n\n    /**\n     * Includes current envelope (from, to)\n     * @private\n     */\n    this._envelope = false;\n\n    /**\n     * Lists supported extensions\n     * @private\n     */\n    this._supportedExtensions = [];\n\n    /**\n     * Defines the maximum allowed size for a single message\n     * @private\n     */\n    this._maxAllowedSize = 0;\n\n    /**\n     * Function queue to run if a data chunk comes from the server\n     * @private\n     */\n    this._responseActions = [];\n    this._recipientQueue = [];\n\n    /**\n     * Timeout variable for waiting the greeting\n     * @private\n     */\n    this._greetingTimeout = false;\n\n    /**\n     * Timeout variable for waiting the connection to start\n     * @private\n     */\n    this._connectionTimeout = false;\n\n    /**\n     * If the socket is deemed already closed\n     * @private\n     */\n    this._destroyed = false;\n\n    /**\n     * If the socket is already being closed\n     * @private\n     */\n    this._closing = false;\n}\nutil.inherits(SMTPConnection, EventEmitter);\n\n/**\n * Creates a connection to a SMTP server and sets up connection\n * listener\n */\nSMTPConnection.prototype.connect = function (connectCallback) {\n    if (typeof connectCallback === 'function') {\n        this.once('connect', function () {\n            this.logger.debug('[%s] SMTP handshake finished', this.id);\n            connectCallback();\n        }.bind(this));\n    }\n\n    var opts = {\n        port: this.port,\n        host: this.host\n    };\n\n    if (this.options.localAddress) {\n        opts.localAddress = this.options.localAddress;\n    }\n\n    if (this.options.connection) {\n        // connection is already opened\n        this._socket = this.options.connection;\n        if (this.secureConnection && !this.alreadySecured) {\n            setImmediate(this._upgradeConnection.bind(this, function (err) {\n                if (err) {\n                    this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n                    return;\n                }\n                this._onConnect();\n            }.bind(this)));\n        } else {\n            setImmediate(this._onConnect.bind(this));\n        }\n    } else if (this.options.socket) {\n        // socket object is set up but not yet connected\n        this._socket = this.options.socket;\n        try {\n            this._socket.connect(this.port, this.host, this._onConnect.bind(this));\n        } catch (E) {\n            return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n        }\n    } else if (this.secureConnection) {\n        // connect using tls\n        if (this.options.tls) {\n            Object.keys(this.options.tls).forEach(function (key) {\n                opts[key] = this.options.tls[key];\n            }.bind(this));\n        }\n        try {\n            this._socket = tls.connect(this.port, this.host, opts, this._onConnect.bind(this));\n        } catch (E) {\n            return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n        }\n    } else {\n        // connect using plaintext\n        try {\n            this._socket = net.connect(opts, this._onConnect.bind(this));\n        } catch (E) {\n            return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n        }\n    }\n\n    this._connectionTimeout = setTimeout(function () {\n        this._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n    }.bind(this), this.options.connectionTimeout || CONNECTION_TIMEOUT);\n\n    this._socket.on('error', function (err) {\n        this._onError(err, 'ECONNECTION', false, 'CONN');\n    }.bind(this));\n};\n\n/**\n * Sends QUIT\n */\nSMTPConnection.prototype.quit = function () {\n    this._sendCommand('QUIT');\n    this._responseActions.push(this.close);\n};\n\n/**\n * Closes the connection to the server\n */\nSMTPConnection.prototype.close = function () {\n    clearTimeout(this._connectionTimeout);\n    clearTimeout(this._greetingTimeout);\n    this._responseActions = [];\n\n    // allow to run this function only once\n    if (this._closing) {\n        return;\n    }\n    this._closing = true;\n\n    var closeMethod = 'end';\n\n    if (this.stage === 'init') {\n        // Close the socket immediately when connection timed out\n        closeMethod = 'destroy';\n    }\n\n    this.logger.debug('[%s] Closing connection to the server using \"%s\"', this.id, closeMethod);\n\n    var socket = this._socket && this._socket.socket || this._socket;\n\n    if (socket && !socket.destroyed) {\n        try {\n            this._socket[closeMethod]();\n        } catch (E) {\n            // just ignore\n        }\n    }\n\n    this._destroy();\n};\n\n/**\n * Authenticate user\n */\nSMTPConnection.prototype.login = function (authData, callback) {\n    this._auth = authData || {};\n    this._user = this._auth.xoauth2 && this._auth.xoauth2.options && this._auth.xoauth2.options.user || this._auth.user || '';\n\n    this._authMethod = false;\n    if (this.options.authMethod) {\n        this._authMethod = this.options.authMethod.toUpperCase().trim();\n    } else if (this._auth.xoauth2 && this._supportedAuth.indexOf('XOAUTH2') >= 0) {\n        this._authMethod = 'XOAUTH2';\n    } else if (this._auth.domain && this._supportedAuth.indexOf('NTLM') >= 0) {\n        this._authMethod = 'NTLM';\n    } else {\n        // use first supported\n        this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n    }\n\n    switch (this._authMethod) {\n        case 'XOAUTH2':\n            this._handleXOauth2Token(false, callback);\n            return;\n        case 'LOGIN':\n            this._responseActions.push(function (str) {\n                this._actionAUTH_LOGIN_USER(str, callback);\n            }.bind(this));\n            this._sendCommand('AUTH LOGIN');\n            return;\n        case 'PLAIN':\n            this._responseActions.push(function (str) {\n                this._actionAUTHComplete(str, callback);\n            }.bind(this));\n            this._sendCommand('AUTH PLAIN ' + new Buffer(\n                //this._auth.user+'\\u0000'+\n                '\\u0000' + // skip authorization identity as it causes problems with some servers\n                this._auth.user + '\\u0000' +\n                this._auth.pass, 'utf-8').toString('base64'));\n            return;\n        case 'CRAM-MD5':\n            this._responseActions.push(function (str) {\n                this._actionAUTH_CRAM_MD5(str, callback);\n            }.bind(this));\n            this._sendCommand('AUTH CRAM-MD5');\n            return;\n        case 'NTLM':\n            this._responseActions.push(function (str) {\n                this._actionAUTH_NTLM_TYPE1(str, callback);\n            }.bind(this));\n            this._sendCommand('AUTH ' + ntlm.createType1Message({\n                domain: this._auth.domain || '',\n                workstation: this._auth.workstation || ''\n            }));\n            return;\n    }\n\n    return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n};\n\n/**\n * Sends a message\n *\n * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n * @param {Object} message String, Buffer or a Stream\n * @param {Function} callback Callback to return once sending is completed\n */\nSMTPConnection.prototype.send = function (envelope, message, done) {\n    if (!message) {\n        return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n    }\n\n    // reject larger messages than allowed\n    if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n        return setImmediate(function () {\n            done(this._formatError('Message size larger than allowed ' + this._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n        }.bind(this));\n    }\n\n    // ensure that callback is only called once\n    var returned = false;\n    var callback = function () {\n        if (returned) {\n            return;\n        }\n        returned = true;\n\n        done.apply(null, Array.prototype.slice.call(arguments));\n    };\n\n    if (typeof message.on === 'function') {\n        message.on('error', function (err) {\n            return callback(this._formatError(err, 'ESTREAM', false, 'API'));\n        }.bind(this));\n    }\n\n    this._setEnvelope(envelope, function (err, info) {\n        if (err) {\n            return callback(err);\n        }\n        var stream = this._createSendStream(function (err, str) {\n            if (err) {\n                return callback(err);\n            }\n            info.response = str;\n            return callback(null, info);\n        });\n        if (typeof message.pipe === 'function') {\n            message.pipe(stream);\n        } else {\n            stream.write(message);\n            stream.end();\n        }\n\n    }.bind(this));\n};\n\n/**\n * Resets connection state\n *\n * @param {Function} callback Callback to return once connection is reset\n */\nSMTPConnection.prototype.reset = function (callback) {\n    this._sendCommand('RSET');\n    this._responseActions.push(function (str) {\n        if (str.charAt(0) !== '2') {\n            return callback(this._formatError('Could not reset session state:\\n' + str, 'EPROTOCOL', str, 'RSET'));\n        }\n        this._envelope = false;\n        return callback(null, true);\n    }.bind(this));\n};\n\n/**\n * Connection listener that is run when the connection to\n * the server is opened\n *\n * @event\n */\nSMTPConnection.prototype._onConnect = function () {\n    clearTimeout(this._connectionTimeout);\n\n    this.logger.info('[%s] %s established to %s:%s', this.id, this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);\n\n    if (this._destroyed) {\n        // Connection was established after we already had canceled it\n        this.close();\n        return;\n    }\n\n    this.stage = 'connected';\n\n    // clear existing listeners for the socket\n    this._socket.removeAllListeners('data');\n    this._socket.removeAllListeners('timeout');\n    this._socket.removeAllListeners('close');\n    this._socket.removeAllListeners('end');\n\n    this._socket.on('data', this._onData.bind(this));\n    this._socket.once('close', this._onClose.bind(this));\n    this._socket.once('end', this._onEnd.bind(this));\n\n    this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n    this._socket.on('timeout', this._onTimeout.bind(this));\n\n    this._greetingTimeout = setTimeout(function () {\n        // if still waiting for greeting, give up\n        if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n            this._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n        }\n    }.bind(this), this.options.greetingTimeout || GREETING_TIMEOUT);\n\n    this._responseActions.push(this._actionGreeting);\n\n    // we have a 'data' listener set up so resume socket if it was paused\n    this._socket.resume();\n};\n\n/**\n * 'data' listener for data coming from the server\n *\n * @event\n * @param {Buffer} chunk Data chunk coming from the server\n */\nSMTPConnection.prototype._onData = function (chunk) {\n    if (this._destroyed || !chunk || !chunk.length) {\n        return;\n    }\n\n    var data = (chunk || '').toString('binary');\n    var lines = (this._remainder + data).split(/\\r?\\n/);\n    var lastline;\n\n    this._remainder = lines.pop();\n\n    for (var i = 0, len = lines.length; i < len; i++) {\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+\\-/.test(lastline.split('\\n').pop())) {\n                this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n                continue;\n            }\n        }\n        this._responseQueue.push(lines[i]);\n    }\n\n    this._processResponse();\n};\n\n/**\n * 'error' listener for the socket\n *\n * @event\n * @param {Error} err Error object\n * @param {String} type Error name\n */\nSMTPConnection.prototype._onError = function (err, type, data, command) {\n    clearTimeout(this._connectionTimeout);\n    clearTimeout(this._greetingTimeout);\n\n    if (this._destroyed) {\n        // just ignore, already closed\n        // this might happen when a socket is canceled because of reached timeout\n        // but the socket timeout error itself receives only after\n        return;\n    }\n\n    err = this._formatError(err, type, data, command);\n\n    this.logger.error('[%s] %s', this.id, err.message);\n\n    this.emit('error', err);\n    this.close();\n};\n\nSMTPConnection.prototype._formatError = function (message, type, response, command) {\n    var err;\n\n    if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n        err = message;\n    } else {\n        err = new Error(message);\n    }\n\n    if (type && type !== 'Error') {\n        err.code = type;\n    }\n\n    if (response) {\n        err.response = response;\n        err.message += ': ' + response;\n    }\n\n    var responseCode = typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0]) || false;\n    if (responseCode) {\n        err.responseCode = responseCode;\n    }\n\n    if (command) {\n        err.command = command;\n    }\n\n    return err;\n};\n\n/**\n * 'close' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onClose = function () {\n    this.logger.info('[%s] Connection closed', this.id);\n\n    if ([this._actionGreeting, this.close].indexOf(this._responseActions[0]) < 0 && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');\n    }\n\n    this._destroy();\n};\n\n/**\n * 'end' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onEnd = function () {\n    this._destroy();\n};\n\n/**\n * 'timeout' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onTimeout = function () {\n    return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n};\n\n/**\n * Destroys the client, emits 'end'\n */\nSMTPConnection.prototype._destroy = function () {\n    if (this._destroyed) {\n        return;\n    }\n    this._destroyed = true;\n    this.emit('end');\n};\n\n/**\n * Upgrades the connection to TLS\n *\n * @param {Function} callback Callback function to run when the connection\n *        has been secured\n */\nSMTPConnection.prototype._upgradeConnection = function (callback) {\n    // do not remove all listeners or it breaks node v0.10 as there's\n    // apparently a 'finish' event set that would be cleared as well\n\n    // we can safely keep 'error', 'end', 'close' etc. events\n    this._socket.removeAllListeners('data'); // incoming data is going to be gibberish from this point onwards\n    this._socket.removeAllListeners('timeout'); // timeout will be re-set for the new socket object\n\n    var socketPlain = this._socket;\n    var opts = {\n        socket: this._socket,\n        host: this.host\n    };\n\n    Object.keys(this.options.tls || {}).forEach(function (key) {\n        opts[key] = this.options.tls[key];\n    }.bind(this));\n\n    this._socket = tls.connect(opts, function () {\n        this.secure = true;\n        this._socket.on('data', this._onData.bind(this));\n\n        socketPlain.removeAllListeners('close');\n        socketPlain.removeAllListeners('end');\n\n        return callback(null, true);\n    }.bind(this));\n\n    this._socket.on('error', this._onError.bind(this));\n    this._socket.once('close', this._onClose.bind(this));\n    this._socket.once('end', this._onEnd.bind(this));\n\n    this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n    this._socket.on('timeout', this._onTimeout.bind(this));\n\n    // resume in case the socket was paused\n    socketPlain.resume();\n};\n\n/**\n * Processes queued responses from the server\n *\n * @param {Boolean} force If true, ignores _processing flag\n */\nSMTPConnection.prototype._processResponse = function () {\n    if (!this._responseQueue.length) {\n        return false;\n    }\n\n    var str = (this._responseQueue.shift() || '').toString();\n\n    if (/^\\d+\\-/.test(str.split('\\n').pop())) {\n        // keep waiting for the final part of multiline response\n        return;\n    }\n\n    if (this.options.debug) {\n        this.logger.debug('[%s] S: %s', this.id, str.replace(/\\r?\\n$/, ''));\n    }\n\n    if (!str.trim()) { // skip unexpected empty lines\n        setImmediate(this._processResponse.bind(this, true));\n    }\n\n    var action = this._responseActions.shift();\n\n    if (typeof action === 'function') {\n        action.call(this, str);\n        setImmediate(this._processResponse.bind(this, true));\n    } else {\n        return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n    }\n};\n\n/**\n * Send a command to the server, append \\r\\n\n *\n * @param {String} str String to be sent to the server\n */\nSMTPConnection.prototype._sendCommand = function (str) {\n    if (this._destroyed) {\n        // Connection already closed, can't send any more data\n        return;\n    }\n\n    if (this._socket.destroyed) {\n        return this.close();\n    }\n\n    if (this.options.debug) {\n        this.logger.debug('[%s] C: %s', this.id, (str || '').toString().replace(/\\r?\\n$/, ''));\n    }\n\n    this._socket.write(new Buffer(str + '\\r\\n', 'utf-8'));\n};\n\n/**\n * Initiates a new message by submitting envelope data, starting with\n * MAIL FROM: command\n *\n * @param {Object} envelope Envelope object in the form of\n *        {from:'...', to:['...']}\n *        or\n *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n */\nSMTPConnection.prototype._setEnvelope = function (envelope, callback) {\n    var args = [];\n    var useSmtpUtf8 = false;\n\n    this._envelope = envelope || {};\n    this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();\n\n    this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n        return (to && to.address || to || '').toString().trim();\n    });\n\n    if (!this._envelope.to.length) {\n        return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n    }\n\n    if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n        return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n    }\n\n    // check if the sender address uses only ASCII characters,\n    // otherwise require usage of SMTPUTF8 extension\n    if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n        useSmtpUtf8 = true;\n    }\n\n    for (var i = 0, len = this._envelope.to.length; i < len; i++) {\n        if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n            return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n        }\n\n        // check if the recipients addresses use only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n            useSmtpUtf8 = true;\n        }\n    }\n\n    // clone the recipients array for latter manipulation\n    this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n    this._envelope.rejected = [];\n    this._envelope.rejectedErrors = [];\n    this._envelope.accepted = [];\n\n    if (this._envelope.dsn) {\n        try {\n            this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n        } catch (err) {\n            return callback(this._formatError('Invalid dsn ' + err.message, 'EENVELOPE', false, 'API'));\n        }\n    }\n\n    this._responseActions.push(function (str) {\n        this._actionMAIL(str, callback);\n    }.bind(this));\n\n    // If the server supports SMTPUTF8 and the envelope includes an internationalized\n    // email address then append SMTPUTF8 keyword to the MAIL FROM command\n    if (useSmtpUtf8 && this._supportedExtensions.indexOf('SMTPUTF8') >= 0) {\n        args.push('SMTPUTF8');\n        this._usingSmtpUtf8 = true;\n    }\n\n    // If the server supports 8BITMIME and the message might contain non-ascii bytes\n    // then append the 8BITMIME keyword to the MAIL FROM command\n    if (this._envelope.use8BitMime && this._supportedExtensions.indexOf('8BITMIME') >= 0) {\n        args.push('BODY=8BITMIME');\n        this._using8BitMime = true;\n    }\n\n    if (this._envelope.size && this._supportedExtensions.indexOf('SIZE') >= 0) {\n        args.push('SIZE=' + this._envelope.size);\n    }\n\n    // If the server supports DSN and the envelope includes an DSN prop\n    // then append DSN params to the MAIL FROM command\n    if (this._envelope.dsn && this._supportedExtensions.indexOf('DSN') >= 0) {\n        if (this._envelope.dsn.ret) {\n            args.push('RET=' + this._envelope.dsn.ret);\n        }\n        if (this._envelope.dsn.envid) {\n            args.push('ENVID=' + this._envelope.dsn.envid);\n        }\n    }\n\n    this._sendCommand('MAIL FROM:<' + (this._envelope.from) + '>' + (args.length ? ' ' + args.join(' ') : ''));\n};\n\nSMTPConnection.prototype._setDsnEnvelope = function (params) {\n    var ret = params.ret ? params.ret.toString().toUpperCase() : null;\n    if (ret && ['FULL', 'HDRS'].indexOf(ret) < 0) {\n        throw new Error('ret: ' + JSON.stringify(ret));\n    }\n    var envid = params.envid ? params.envid.toString() : null;\n    var notify = params.notify ? params.notify : null;\n    if (notify) {\n        if (typeof notify === 'string') {\n            notify = notify.split(',');\n        }\n        notify = notify.map(function (n) {\n            return n.trim().toUpperCase();\n        });\n        var validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n        var invaliNotify = notify.filter(function (n) {\n            return validNotify.indexOf(n) === -1;\n        });\n        if (invaliNotify.length || (notify.length > 1 && notify.indexOf('NEVER') >= 0)) {\n            throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n        }\n        notify = notify.join(',');\n    }\n    var orcpt = params.orcpt ? params.orcpt.toString() : null;\n    return {\n        ret: ret,\n        envid: envid,\n        notify: notify,\n        orcpt: orcpt\n    };\n};\n\nSMTPConnection.prototype._getDsnRcptToArgs = function () {\n    var args = [];\n    // If the server supports DSN and the envelope includes an DSN prop\n    // then append DSN params to the RCPT TO command\n    if (this._envelope.dsn && this._supportedExtensions.indexOf('DSN') >= 0) {\n        if (this._envelope.dsn.notify) {\n            args.push('NOTIFY=' + this._envelope.dsn.notify);\n        }\n        if (this._envelope.dsn.orcpt) {\n            args.push('ORCPT=' + this._envelope.dsn.orcpt);\n        }\n    }\n    return (args.length ? ' ' + args.join(' ') : '');\n};\n\nSMTPConnection.prototype._createSendStream = function (callback) {\n    var dataStream = new DataStream();\n    var logStream;\n\n    if (this.options.lmtp) {\n        this._envelope.accepted.forEach(function (recipient, i) {\n            var final = i === this._envelope.accepted.length - 1;\n            this._responseActions.push(function (str) {\n                this._actionLMTPStream(recipient, final, str, callback);\n            }.bind(this));\n        }.bind(this));\n    } else {\n        this._responseActions.push(function (str) {\n            this._actionSMTPStream(str, callback);\n        }.bind(this));\n    }\n\n    dataStream.pipe(this._socket, {\n        end: false\n    });\n\n    if (this.options.debug) {\n        logStream = new PassThrough();\n        logStream.on('readable', function () {\n            var chunk;\n            while ((chunk = logStream.read())) {\n                this.logger.debug('[%s] C: %s', this.id, chunk.toString('binary').replace(/\\r?\\n$/, ''));\n            }\n        }.bind(this));\n        dataStream.pipe(logStream);\n    }\n\n    dataStream.once('end', function () {\n        this.logger.info('[%s] C: <%s bytes encoded mime message (source size %s bytes)>', this.id, dataStream.outByteCount, dataStream.inByteCount);\n    }.bind(this));\n\n    return dataStream;\n};\n\n/** ACTIONS **/\n\n/**\n * Will be run after the connection is created and the server sends\n * a greeting. If the incoming message starts with 220 initiate\n * SMTP session by sending EHLO command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionGreeting = function (str) {\n    clearTimeout(this._greetingTimeout);\n\n    if (str.substr(0, 3) !== '220') {\n        this._onError(new Error('Invalid greeting from server:\\n' + str), 'EPROTOCOL', str, 'CONN');\n        return;\n    }\n\n    if (this.options.lmtp) {\n        this._responseActions.push(this._actionLHLO);\n        this._sendCommand('LHLO ' + this.name);\n    } else {\n        this._responseActions.push(this._actionEHLO);\n        this._sendCommand('EHLO ' + this.name);\n    }\n};\n\n/**\n * Handles server response for LHLO command. If it yielded in\n * error, emit 'error', otherwise treat this as an EHLO response\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionLHLO = function (str) {\n    if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid response for LHLO:\\n' + str), 'EPROTOCOL', str, 'LHLO');\n        return;\n    }\n\n    this._actionEHLO(str);\n};\n\n/**\n * Handles server response for EHLO command. If it yielded in\n * error, try HELO instead, otherwise initiate TLS negotiation\n * if STARTTLS is supported by the server or move into the\n * authentication phase.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionEHLO = function (str) {\n    var match;\n\n    if (str.substr(0, 3) === '421') {\n        this._onError(new Error('Server terminates connection:\\n' + str), 'ECONNECTION', str, 'EHLO');\n        return;\n    }\n\n    if (str.charAt(0) !== '2') {\n        if (this.options.requireTLS) {\n            this._onError(new Error('EHLO failed but HELO does not support required STARTTLS:\\n' + str), 'ECONNECTION', str, 'EHLO');\n            return;\n        }\n\n        // Try HELO instead\n        this._responseActions.push(this._actionHELO);\n        this._sendCommand('HELO ' + this.name);\n        return;\n    }\n\n    // Detect if the server supports STARTTLS\n    if (!this.secure && !this.options.ignoreTLS && (/[ \\-]STARTTLS\\b/mi.test(str) || this.options.requireTLS)) {\n        this._sendCommand('STARTTLS');\n        this._responseActions.push(this._actionSTARTTLS);\n        return;\n    }\n\n    // Detect if the server supports SMTPUTF8\n    if (/[ \\-]SMTPUTF8\\b/mi.test(str)) {\n        this._supportedExtensions.push('SMTPUTF8');\n    }\n\n    // Detect if the server supports DSN\n    if (/[ \\-]DSN\\b/mi.test(str)) {\n        this._supportedExtensions.push('DSN');\n    }\n\n    // Detect if the server supports 8BITMIME\n    if (/[ \\-]8BITMIME\\b/mi.test(str)) {\n        this._supportedExtensions.push('8BITMIME');\n    }\n\n    // Detect if the server supports PIPELINING\n    if (/[ \\-]PIPELINING\\b/mi.test(str)) {\n        this._supportedExtensions.push('PIPELINING');\n    }\n\n    // Detect if the server supports PLAIN auth\n    if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n        this._supportedAuth.push('PLAIN');\n    }\n\n    // Detect if the server supports LOGIN auth\n    if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n        this._supportedAuth.push('LOGIN');\n    }\n\n    // Detect if the server supports CRAM-MD5 auth\n    if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n        this._supportedAuth.push('CRAM-MD5');\n    }\n\n    // Detect if the server supports XOAUTH2 auth\n    if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n        this._supportedAuth.push('XOAUTH2');\n    }\n\n    // Detect if the server supports SIZE extensions (and the max allowed size)\n    if ((match = str.match(/[ \\-]SIZE(?:\\s+(\\d+))?/mi))) {\n        this._supportedExtensions.push('SIZE');\n        this._maxAllowedSize = Number(match[1]) || 0;\n    }\n\n    this.emit('connect');\n};\n\n/**\n * Handles server response for HELO command. If it yielded in\n * error, emit 'error', otherwise move into the authentication phase.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionHELO = function (str) {\n    if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid response for EHLO/HELO:\\n' + str), 'EPROTOCOL', str, 'HELO');\n        return;\n    }\n\n    this.emit('connect');\n};\n\n/**\n * Handles server response for STARTTLS command. If there's an error\n * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n * succeedes restart the EHLO\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionSTARTTLS = function (str) {\n    if (str.charAt(0) !== '2') {\n        if (this.options.opportunisticTLS) {\n            this.logger.info('[%s] Failed STARTTLS upgrade, continuing unencrypted', this.id);\n            return this.emit('connect');\n        }\n        this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n        return;\n    }\n\n    this._upgradeConnection(function (err, secured) {\n        if (err) {\n            this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n            return;\n        }\n\n        this.logger.info('[%s] Connection upgraded with STARTTLS', this.id);\n\n        if (secured) {\n            // restart session\n            this._responseActions.push(this._actionEHLO);\n            this._sendCommand('EHLO ' + this.name);\n        } else {\n            this.emit('connect');\n        }\n    }.bind(this));\n};\n\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n * response needs to be base64 encoded username.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_LOGIN_USER = function (str, callback) {\n    if (str !== '334 VXNlcm5hbWU6') {\n        callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n        return;\n    }\n\n    this._responseActions.push(function (str) {\n        this._actionAUTH_LOGIN_PASS(str, callback);\n    }.bind(this));\n\n    this._sendCommand(new Buffer(this._auth.user + '', 'utf-8').toString('base64'));\n};\n\n/**\n * Handle the response for AUTH NTLM, which should be a\n * '334 <challenge string>'. See http://davenport.sourceforge.net/ntlm.html\n * We already sent the Type1 message, the challenge is a Type2 message, we\n * need to respond with a Type3 message.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_NTLM_TYPE1 = function (str, callback) {\n    var challengeMatch = str.match(/^334\\s+(.+)$/);\n    var challengeString = '';\n\n    if (!challengeMatch) {\n        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH NTLM'));\n    } else {\n        challengeString = challengeMatch[1];\n    }\n\n    if (!/^NTLM/i.test(challengeString)) {\n        challengeString = 'NTLM ' + challengeString;\n    }\n\n    var type2Message = ntlm.parseType2Message(challengeString, callback);\n    if (!type2Message) {\n        return;\n    }\n\n    var type3Message = ntlm.createType3Message(type2Message, {\n        domain: this._auth.domain || '',\n        workstation: this._auth.workstation || '',\n        username: this._auth.user,\n        password: this._auth.pass\n    });\n\n    type3Message = type3Message.substring(5); // remove the \"NTLM \" prefix\n\n    this._responseActions.push(function (str) {\n        this._actionAUTH_NTLM_TYPE3(str, callback);\n    }.bind(this));\n\n    this._sendCommand(type3Message);\n};\n\n/**\n * Handle the response for AUTH CRAM-MD5 command. We are expecting\n * '334 <challenge string>'. Data to be sent as response needs to be\n * base64 decoded challenge string, MD5 hashed using the password as\n * a HMAC key, prefixed by the username and a space, and finally all\n * base64 encoded again.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_CRAM_MD5 = function (str, callback) {\n    var challengeMatch = str.match(/^334\\s+(.+)$/);\n    var challengeString = '';\n\n    if (!challengeMatch) {\n        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n    } else {\n        challengeString = challengeMatch[1];\n    }\n\n    // Decode from base64\n    var base64decoded = new Buffer(challengeString, 'base64').toString('ascii'),\n        hmac_md5 = crypto.createHmac('md5', this._auth.pass);\n\n    hmac_md5.update(base64decoded);\n\n    var hex_hmac = hmac_md5.digest('hex'),\n        prepended = this._auth.user + ' ' + hex_hmac;\n\n    this._responseActions.push(function (str) {\n        this._actionAUTH_CRAM_MD5_PASS(str, callback);\n    }.bind(this));\n\n\n    this._sendCommand(new Buffer(prepended).toString('base64'));\n};\n\n/**\n * Handles the response to CRAM-MD5 authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_CRAM_MD5_PASS = function (str, callback) {\n    if (!str.match(/^235\\s+/)) {\n        return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n    }\n\n    this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n    this.authenticated = true;\n    callback(null, true);\n};\n\n/**\n * Handles the TYPE3 response for NTLM authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_NTLM_TYPE3 = function (str, callback) {\n    if (!str.match(/^235\\s+/)) {\n        return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH NTLM'));\n    }\n\n    this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n    this.authenticated = true;\n    callback(null, true);\n};\n\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n * response needs to be base64 encoded password.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_LOGIN_PASS = function (str, callback) {\n    if (str !== '334 UGFzc3dvcmQ6') {\n        return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n    }\n\n    this._responseActions.push(function (str) {\n        this._actionAUTHComplete(str, callback);\n    }.bind(this));\n\n    this._sendCommand(new Buffer(this._auth.pass + '', 'utf-8').toString('base64'));\n};\n\n/**\n * Handles the response for authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTHComplete = function (str, isRetry, callback) {\n    if (!callback && typeof isRetry === 'function') {\n        callback = isRetry;\n        isRetry = undefined;\n    }\n\n    if (str.substr(0, 3) === '334') {\n        this._responseActions.push(function (str) {\n            if (isRetry || !this._auth.xoauth2 || typeof this._auth.xoauth2 !== 'object') {\n                this._actionAUTHComplete(str, true, callback);\n            } else {\n                setTimeout(this._handleXOauth2Token.bind(this, true, callback), Math.random() * 4000 + 1000);\n            }\n        }.bind(this));\n        this._sendCommand('');\n        return;\n    }\n\n    if (str.charAt(0) !== '2') {\n        this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n        return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n    }\n\n    this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n    this.authenticated = true;\n    callback(null, true);\n};\n\n/**\n * Handle response for a MAIL FROM: command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionMAIL = function (str, callback) {\n    var message, curRecipient;\n    if (Number(str.charAt(0)) !== 2) {\n        if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n            message = 'Internationalized mailbox name not allowed';\n        } else {\n            message = 'Mail command failed';\n        }\n        return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n    }\n\n    if (!this._envelope.rcptQueue.length) {\n        return callback(this._formatError('Can\\'t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n    } else {\n        this._recipientQueue = [];\n\n        if (this._supportedExtensions.indexOf('PIPELINING') >= 0) {\n            while (this._envelope.rcptQueue.length) {\n                curRecipient = this._envelope.rcptQueue.shift();\n                this._recipientQueue.push(curRecipient);\n                this._responseActions.push(function (str) {\n                    this._actionRCPT(str, callback);\n                }.bind(this));\n                this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n            }\n        } else {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push(function (str) {\n                this._actionRCPT(str, callback);\n            }.bind(this));\n            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n        }\n    }\n};\n\n/**\n * Handle response for a RCPT TO: command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionRCPT = function (str, callback) {\n    var message, err, curRecipient = this._recipientQueue.shift();\n    if (Number(str.charAt(0)) !== 2) {\n        // this is a soft error\n        if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n            message = 'Internationalized mailbox name not allowed';\n        } else {\n            message = 'Recipient command failed';\n        }\n        this._envelope.rejected.push(curRecipient);\n        // store error for the failed recipient\n        err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n        err.recipient = curRecipient;\n        this._envelope.rejectedErrors.push(err);\n    } else {\n        this._envelope.accepted.push(curRecipient);\n    }\n\n    if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n        if (this._envelope.rejected.length < this._envelope.to.length) {\n            this._responseActions.push(function (str) {\n                this._actionDATA(str, callback);\n            }.bind(this));\n            this._sendCommand('DATA');\n        } else {\n            err = this._formatError('Can\\'t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n            err.rejected = this._envelope.rejected;\n            err.rejectedErrors = this._envelope.rejectedErrors;\n            return callback(err);\n        }\n    } else if (this._envelope.rcptQueue.length) {\n        curRecipient = this._envelope.rcptQueue.shift();\n        this._recipientQueue.push(curRecipient);\n        this._responseActions.push(function (str) {\n            this._actionRCPT(str, callback);\n        }.bind(this));\n        this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n    }\n};\n\n/**\n * Handle response for a DATA command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionDATA = function (str, callback) {\n    // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n    // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n    if ([2, 3].indexOf(Number(str.charAt(0))) < 0) {\n        return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n    }\n\n    var response = {\n        accepted: this._envelope.accepted,\n        rejected: this._envelope.rejected\n    };\n\n    if (this._envelope.rejectedErrors.length) {\n        response.rejectedErrors = this._envelope.rejectedErrors;\n    }\n\n    callback(null, response);\n};\n\n/**\n * Handle response for a DATA stream when using SMTP\n * We expect a single response that defines if the sending succeeded or failed\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionSMTPStream = function (str, callback) {\n    if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n    } else {\n        // Message sent succesfully\n        return callback(null, str);\n    }\n};\n\n/**\n * Handle response for a DATA stream\n * We expect a separate response for every recipient. All recipients can either\n * succeed or fail separately\n *\n * @param {String} recipient The recipient this response applies to\n * @param {Boolean} final Is this the final recipient?\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionLMTPStream = function (recipient, final, str, callback) {\n    var err;\n    if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n        err.recipient = recipient;\n        this._envelope.rejected.push(recipient);\n        this._envelope.rejectedErrors.push(err);\n        for (var i = 0, len = this._envelope.accepted.length; i < len; i++) {\n            if (this._envelope.accepted[i] === recipient) {\n                this._envelope.accepted.splice(i, 1);\n            }\n        }\n    }\n    if (final) {\n        return callback(null, str);\n    }\n};\n\nSMTPConnection.prototype._handleXOauth2Token = function (isRetry, callback) {\n    this._responseActions.push(function (str) {\n        this._actionAUTHComplete(str, isRetry, callback);\n    }.bind(this));\n\n    if (this._auth.xoauth2 && typeof this._auth.xoauth2 === 'object') {\n        this._auth.xoauth2[isRetry ? 'generateToken' : 'getToken'](function (err, token) {\n            if (err) {\n                this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n                return callback(this._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n            }\n            this._sendCommand('AUTH XOAUTH2 ' + token);\n        }.bind(this));\n    } else {\n        this._sendCommand('AUTH XOAUTH2 ' + this._buildXOAuth2Token(this._auth.user, this._auth.xoauth2));\n    }\n};\n\n/**\n * Builds a login token for XOAUTH2 authentication command\n *\n * @param {String} user E-mail address of the user\n * @param {String} token Valid access token for the user\n * @return {String} Base64 formatted login token\n */\nSMTPConnection.prototype._buildXOAuth2Token = function (user, token) {\n    var authData = [\n        'user=' + (user || ''),\n        'auth=Bearer ' + token,\n        '',\n        ''\n    ];\n    return new Buffer(authData.join('\\x01')).toString('base64');\n};\n\nSMTPConnection.prototype._getHostname = function () {\n    // defaul hostname is machine hostname or [IP]\n    var defaultHostname = os.hostname() || '';\n\n    // ignore if not FQDN\n    if (defaultHostname.indexOf('.') < 0) {\n        defaultHostname = '[127.0.0.1]';\n    }\n\n    // IP should be enclosed in []\n    if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n        defaultHostname = '[' + defaultHostname + ']';\n    }\n\n    return defaultHostname;\n};\n"]},"metadata":{},"sourceType":"script"}