{"ast":null,"code":"'use strict';\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar urllib = require('url');\n\nvar zlib = require('zlib');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar Cookies = require('./cookies');\n\nvar MAX_REDIRECTS = 5;\n\nmodule.exports = function (url, options) {\n  return fetch(url, options);\n};\n\nmodule.exports.Cookies = Cookies;\n\nfunction fetch(url, options) {\n  options = options || {};\n  options.fetchRes = options.fetchRes || new PassThrough();\n  options.cookies = options.cookies || new Cookies();\n  options.redirects = options.redirects || 0;\n  options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;\n\n  if (options.cookie) {\n    [].concat(options.cookie || []).forEach(function (cookie) {\n      options.cookies.set(cookie, url);\n    });\n    options.cookie = false;\n  }\n\n  var fetchRes = options.fetchRes;\n  var parsed = urllib.parse(url);\n  var method = (options.method || '').toString().trim().toUpperCase() || 'GET';\n  var finished = false;\n  var cookies;\n  var body;\n  var handler = parsed.protocol === 'https:' ? https : http;\n  var headers = {\n    'accept-encoding': 'gzip,deflate'\n  };\n  Object.keys(options.headers || {}).forEach(function (key) {\n    headers[key.toLowerCase().trim()] = options.headers[key];\n  });\n\n  if (options.userAgent) {\n    headers['User-Agent'] = options.userAgent;\n  }\n\n  if (parsed.auth) {\n    headers.Authorization = 'Basic ' + new Buffer(parsed.auth).toString('base64');\n  }\n\n  if (cookies = options.cookies.get(url)) {\n    headers.cookie = cookies;\n  }\n\n  if (options.body) {\n    if (options.contentType !== false) {\n      headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';\n    }\n\n    if (typeof options.body.pipe === 'function') {\n      // it's a stream\n      headers['Transfer-Encoding'] = 'chunked';\n      body = options.body;\n      body.on('error', function (err) {\n        if (finished) {\n          return;\n        }\n\n        finished = true;\n        fetchRes.emit('error', err);\n      });\n    } else {\n      if (options.body instanceof Buffer) {\n        body = options.body;\n      } else if (typeof options.body === 'object') {\n        body = new Buffer(Object.keys(options.body).map(function (key) {\n          var value = options.body[key].toString().trim();\n          return encodeURIComponent(key) + '=' + encodeURIComponent(value);\n        }).join('&'));\n      } else {\n        body = new Buffer(options.body.toString().trim());\n      }\n\n      headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';\n      headers['Content-Length'] = body.length;\n    } // if method is not provided, use POST instead of GET\n\n\n    method = (options.method || '').toString().trim().toUpperCase() || 'POST';\n  }\n\n  var req;\n  var reqOptions = {\n    method: method,\n    host: parsed.hostname,\n    path: parsed.path,\n    port: parsed.port ? parsed.port : parsed.protocol === 'https:' ? 443 : 80,\n    headers: headers,\n    rejectUnauthorized: false,\n    agent: false\n  };\n\n  if (options.tls) {\n    Object.keys(options.tls).forEach(function (key) {\n      reqOptions[key] = options.tls[key];\n    });\n  }\n\n  try {\n    req = handler.request(reqOptions);\n  } catch (E) {\n    finished = true;\n    setImmediate(function () {\n      fetchRes.emit('error', E);\n    });\n    return fetchRes;\n  }\n\n  if (options.timeout) {\n    req.setTimeout(options.timeout, function () {\n      if (finished) {\n        return;\n      }\n\n      finished = true;\n      req.abort();\n      fetchRes.emit('error', new Error('Request Tiemout'));\n    });\n  }\n\n  req.on('error', function (err) {\n    if (finished) {\n      return;\n    }\n\n    finished = true;\n    fetchRes.emit('error', err);\n  });\n  req.on('response', function (res) {\n    var inflate;\n\n    if (finished) {\n      return;\n    }\n\n    switch (res.headers['content-encoding']) {\n      case 'gzip':\n      case 'deflate':\n        inflate = zlib.createUnzip();\n        break;\n    }\n\n    if (res.headers['set-cookie']) {\n      [].concat(res.headers['set-cookie'] || []).forEach(function (cookie) {\n        options.cookies.set(cookie, url);\n      });\n    }\n\n    if ([301, 302, 303, 307, 308].indexOf(res.statusCode) >= 0 && res.headers.location) {\n      // redirect\n      options.redirects++;\n\n      if (options.redirects > options.maxRedirects) {\n        finished = true;\n        fetchRes.emit('error', new Error('Maximum redirect count exceeded'));\n        req.abort();\n        return;\n      }\n\n      return fetch(urllib.resolve(url, res.headers.location), options);\n    }\n\n    if (res.statusCode >= 300) {\n      finished = true;\n      fetchRes.emit('error', new Error('Invalid status code ' + res.statusCode));\n      req.abort();\n      return;\n    }\n\n    res.on('error', function (err) {\n      if (finished) {\n        return;\n      }\n\n      finished = true;\n      fetchRes.emit('error', err);\n      req.abort();\n    });\n\n    if (inflate) {\n      res.pipe(inflate).pipe(fetchRes);\n      inflate.on('error', function (err) {\n        if (finished) {\n          return;\n        }\n\n        finished = true;\n        fetchRes.emit('error', err);\n        req.abort();\n      });\n    } else {\n      res.pipe(fetchRes);\n    }\n  });\n  setImmediate(function () {\n    if (body) {\n      try {\n        if (typeof body.pipe === 'function') {\n          return body.pipe(req);\n        } else {\n          req.write(body);\n        }\n      } catch (err) {\n        finished = true;\n        fetchRes.emit('error', err);\n        return;\n      }\n    }\n\n    req.end();\n  });\n  return fetchRes;\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/GRP/frontend/node_modules/nodemailer-fetch/lib/fetch.js"],"names":["http","require","https","urllib","zlib","PassThrough","Cookies","MAX_REDIRECTS","module","exports","url","options","fetch","fetchRes","cookies","redirects","maxRedirects","isNaN","cookie","concat","forEach","set","parsed","parse","method","toString","trim","toUpperCase","finished","body","handler","protocol","headers","Object","keys","key","toLowerCase","userAgent","auth","Authorization","Buffer","get","contentType","pipe","on","err","emit","map","value","encodeURIComponent","join","length","req","reqOptions","host","hostname","path","port","rejectUnauthorized","agent","tls","request","E","setImmediate","timeout","setTimeout","abort","Error","res","inflate","createUnzip","indexOf","statusCode","location","resolve","write","end"],"mappings":"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","sourcesContent":["'use strict';\n\nvar http = require('http');\nvar https = require('https');\nvar urllib = require('url');\nvar zlib = require('zlib');\nvar PassThrough = require('stream').PassThrough;\nvar Cookies = require('./cookies');\n\nvar MAX_REDIRECTS = 5;\n\nmodule.exports = function (url, options) {\n    return fetch(url, options);\n};\n\nmodule.exports.Cookies = Cookies;\n\nfunction fetch(url, options) {\n    options = options || {};\n\n    options.fetchRes = options.fetchRes || new PassThrough();\n    options.cookies = options.cookies || new Cookies();\n    options.redirects = options.redirects || 0;\n    options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;\n\n    if (options.cookie) {\n        [].concat(options.cookie || []).forEach(function (cookie) {\n            options.cookies.set(cookie, url);\n        });\n        options.cookie = false;\n    }\n\n    var fetchRes = options.fetchRes;\n    var parsed = urllib.parse(url);\n    var method = (options.method || '').toString().trim().toUpperCase() || 'GET';\n    var finished = false;\n    var cookies;\n    var body;\n\n    var handler = parsed.protocol === 'https:' ? https : http;\n\n    var headers = {\n        'accept-encoding': 'gzip,deflate'\n    };\n\n    Object.keys(options.headers || {}).forEach(function (key) {\n        headers[key.toLowerCase().trim()] = options.headers[key];\n    });\n\n    if (options.userAgent) {\n        headers['User-Agent'] = options.userAgent;\n    }\n\n    if (parsed.auth) {\n        headers.Authorization = 'Basic ' + new Buffer(parsed.auth).toString('base64');\n    }\n\n    if ((cookies = options.cookies.get(url))) {\n        headers.cookie = cookies;\n    }\n\n    if (options.body) {\n        if (options.contentType !== false) {\n            headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';\n        }\n\n        if (typeof options.body.pipe === 'function') {\n            // it's a stream\n            headers['Transfer-Encoding'] = 'chunked';\n            body = options.body;\n            body.on('error', function (err) {\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                fetchRes.emit('error', err);\n            });\n        } else {\n            if (options.body instanceof Buffer) {\n                body = options.body;\n            } else if (typeof options.body === 'object') {\n                body = new Buffer(Object.keys(options.body).map(function (key) {\n                    var value = options.body[key].toString().trim();\n                    return encodeURIComponent(key) + '=' + encodeURIComponent(value);\n                }).join('&'));\n            } else {\n                body = new Buffer(options.body.toString().trim());\n            }\n\n            headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';\n            headers['Content-Length'] = body.length;\n        }\n        // if method is not provided, use POST instead of GET\n        method = (options.method || '').toString().trim().toUpperCase() || 'POST';\n    }\n\n    var req;\n    var reqOptions = {\n        method: method,\n        host: parsed.hostname,\n        path: parsed.path,\n        port: parsed.port ? parsed.port : (parsed.protocol === 'https:' ? 443 : 80),\n        headers: headers,\n        rejectUnauthorized: false,\n        agent: false\n    };\n\n    if (options.tls) {\n        Object.keys(options.tls).forEach(function (key) {\n            reqOptions[key] = options.tls[key];\n        });\n    }\n\n    try {\n        req = handler.request(reqOptions);\n    } catch (E) {\n        finished = true;\n        setImmediate(function () {\n            fetchRes.emit('error', E);\n        });\n        return fetchRes;\n    }\n\n    if (options.timeout) {\n        req.setTimeout(options.timeout, function () {\n            if (finished) {\n                return;\n            }\n            finished = true;\n            req.abort();\n            fetchRes.emit('error', new Error('Request Tiemout'));\n        });\n    }\n\n    req.on('error', function (err) {\n        if (finished) {\n            return;\n        }\n        finished = true;\n        fetchRes.emit('error', err);\n    });\n\n    req.on('response', function (res) {\n        var inflate;\n\n        if (finished) {\n            return;\n        }\n\n        switch (res.headers['content-encoding']) {\n            case 'gzip':\n            case 'deflate':\n                inflate = zlib.createUnzip();\n                break;\n        }\n\n        if (res.headers['set-cookie']) {\n            [].concat(res.headers['set-cookie'] || []).forEach(function (cookie) {\n                options.cookies.set(cookie, url);\n            });\n        }\n\n        if ([301, 302, 303, 307, 308].indexOf(res.statusCode) >= 0 && res.headers.location) {\n            // redirect\n            options.redirects++;\n            if (options.redirects > options.maxRedirects) {\n                finished = true;\n                fetchRes.emit('error', new Error('Maximum redirect count exceeded'));\n                req.abort();\n                return;\n            }\n            return fetch(urllib.resolve(url, res.headers.location), options);\n        }\n\n        if (res.statusCode >= 300) {\n            finished = true;\n            fetchRes.emit('error', new Error('Invalid status code ' + res.statusCode));\n            req.abort();\n            return;\n        }\n\n        res.on('error', function (err) {\n            if (finished) {\n                return;\n            }\n            finished = true;\n            fetchRes.emit('error', err);\n            req.abort();\n        });\n\n        if (inflate) {\n            res.pipe(inflate).pipe(fetchRes);\n            inflate.on('error', function (err) {\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                fetchRes.emit('error', err);\n                req.abort();\n            });\n        } else {\n            res.pipe(fetchRes);\n        }\n    });\n\n    setImmediate(function () {\n        if (body) {\n            try {\n                if (typeof body.pipe === 'function') {\n                    return body.pipe(req);\n                } else {\n                    req.write(body);\n                }\n            } catch (err) {\n                finished = true;\n                fetchRes.emit('error', err);\n                return;\n            }\n        }\n        req.end();\n    });\n\n    return fetchRes;\n}\n"]},"metadata":{},"sourceType":"script"}